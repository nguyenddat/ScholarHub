[
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "PyPDFLoader",
        "importPath": "langchain_community.document_loaders",
        "description": "langchain_community.document_loaders",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders",
        "documentation": {}
    },
    {
        "label": "get_chat_completion",
        "importPath": "ai.core.chain",
        "description": "ai.core.chain",
        "isExtraImport": true,
        "detail": "ai.core.chain",
        "documentation": {}
    },
    {
        "label": "get_chat_completion",
        "importPath": "ai.core.chain",
        "description": "ai.core.chain",
        "isExtraImport": true,
        "detail": "ai.core.chain",
        "documentation": {}
    },
    {
        "label": "get_chat_completion",
        "importPath": "ai.core.chain",
        "description": "ai.core.chain",
        "isExtraImport": true,
        "detail": "ai.core.chain",
        "documentation": {}
    },
    {
        "label": "get_chat_completion",
        "importPath": "ai.core.chain",
        "description": "ai.core.chain",
        "isExtraImport": true,
        "detail": "ai.core.chain",
        "documentation": {}
    },
    {
        "label": "get_chat_completion",
        "importPath": "ai.core.chain",
        "description": "ai.core.chain",
        "isExtraImport": true,
        "detail": "ai.core.chain",
        "documentation": {}
    },
    {
        "label": "get_chat_completion",
        "importPath": "ai.core.chain",
        "description": "ai.core.chain",
        "isExtraImport": true,
        "detail": "ai.core.chain",
        "documentation": {}
    },
    {
        "label": "get_chat_completion",
        "importPath": "ai.core.chain",
        "description": "ai.core.chain",
        "isExtraImport": true,
        "detail": "ai.core.chain",
        "documentation": {}
    },
    {
        "label": "ProfileMatch",
        "importPath": "ai.ProfileMatching.services",
        "description": "ai.ProfileMatching.services",
        "isExtraImport": true,
        "detail": "ai.ProfileMatching.services",
        "documentation": {}
    },
    {
        "label": "ResumeExtract",
        "importPath": "ai.ProfileMatching.services",
        "description": "ai.ProfileMatching.services",
        "isExtraImport": true,
        "detail": "ai.ProfileMatching.services",
        "documentation": {}
    },
    {
        "label": "ScholarshipExtract",
        "importPath": "ai.ProfileMatching.services",
        "description": "ai.ProfileMatching.services",
        "isExtraImport": true,
        "detail": "ai.ProfileMatching.services",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database.init_db",
        "description": "database.init_db",
        "isExtraImport": true,
        "detail": "database.init_db",
        "documentation": {}
    },
    {
        "label": "Scholarship",
        "importPath": "models.Scholarship",
        "description": "models.Scholarship",
        "isExtraImport": true,
        "detail": "models.Scholarship",
        "documentation": {}
    },
    {
        "label": "Scholarship",
        "importPath": "models.Scholarship",
        "description": "models.Scholarship",
        "isExtraImport": true,
        "detail": "models.Scholarship",
        "documentation": {}
    },
    {
        "label": "Scholarship",
        "importPath": "models.Scholarship",
        "description": "models.Scholarship",
        "isExtraImport": true,
        "detail": "models.Scholarship",
        "documentation": {}
    },
    {
        "label": "Scholarship",
        "importPath": "models.Scholarship",
        "description": "models.Scholarship",
        "isExtraImport": true,
        "detail": "models.Scholarship",
        "documentation": {}
    },
    {
        "label": "Scholarship",
        "importPath": "models.Scholarship",
        "description": "models.Scholarship",
        "isExtraImport": true,
        "detail": "models.Scholarship",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "models.Profile",
        "description": "models.Profile",
        "isExtraImport": true,
        "detail": "models.Profile",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "models.Profile",
        "description": "models.Profile",
        "isExtraImport": true,
        "detail": "models.Profile",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "models.Profile",
        "description": "models.Profile",
        "isExtraImport": true,
        "detail": "models.Profile",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "models.Profile",
        "description": "models.Profile",
        "isExtraImport": true,
        "detail": "models.Profile",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "models.Profile",
        "description": "models.Profile",
        "isExtraImport": true,
        "detail": "models.Profile",
        "documentation": {}
    },
    {
        "label": "load_scholarships",
        "importPath": "ai.Recommendation.services.ScholarshipLoader",
        "description": "ai.Recommendation.services.ScholarshipLoader",
        "isExtraImport": true,
        "detail": "ai.Recommendation.services.ScholarshipLoader",
        "documentation": {}
    },
    {
        "label": "criterias",
        "importPath": "ai.Recommendation.services.ScholarshipLoader",
        "description": "ai.Recommendation.services.ScholarshipLoader",
        "isExtraImport": true,
        "detail": "ai.Recommendation.services.ScholarshipLoader",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "faiss",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "faiss",
        "description": "faiss",
        "detail": "faiss",
        "documentation": {}
    },
    {
        "label": "FAISS",
        "importPath": "langchain_community.vectorstores",
        "description": "langchain_community.vectorstores",
        "isExtraImport": true,
        "detail": "langchain_community.vectorstores",
        "documentation": {}
    },
    {
        "label": "VectorStoreRetriever",
        "importPath": "langchain_core.vectorstores",
        "description": "langchain_core.vectorstores",
        "isExtraImport": true,
        "detail": "langchain_core.vectorstores",
        "documentation": {}
    },
    {
        "label": "InMemoryDocstore",
        "importPath": "langchain_community.docstore.in_memory",
        "description": "langchain_community.docstore.in_memory",
        "isExtraImport": true,
        "detail": "langchain_community.docstore.in_memory",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "openai_embeddings",
        "importPath": "ai.core.LLMs",
        "description": "ai.core.LLMs",
        "isExtraImport": true,
        "detail": "ai.core.LLMs",
        "documentation": {}
    },
    {
        "label": "llm",
        "importPath": "ai.core.LLMs",
        "description": "ai.core.LLMs",
        "isExtraImport": true,
        "detail": "ai.core.LLMs",
        "documentation": {}
    },
    {
        "label": "data_loader",
        "importPath": "helpers.DataLoader",
        "description": "helpers.DataLoader",
        "isExtraImport": true,
        "detail": "helpers.DataLoader",
        "documentation": {}
    },
    {
        "label": "retriever",
        "importPath": "ai.SmartSearch.v1.Retriever",
        "description": "ai.SmartSearch.v1.Retriever",
        "isExtraImport": true,
        "detail": "ai.SmartSearch.v1.Retriever",
        "documentation": {}
    },
    {
        "label": "retriever",
        "importPath": "ai.SmartSearch.v1.Retriever",
        "description": "ai.SmartSearch.v1.Retriever",
        "isExtraImport": true,
        "detail": "ai.SmartSearch.v1.Retriever",
        "documentation": {}
    },
    {
        "label": "to_dict",
        "importPath": "helpers.DictConvert",
        "description": "helpers.DictConvert",
        "isExtraImport": true,
        "detail": "helpers.DictConvert",
        "documentation": {}
    },
    {
        "label": "to_dict",
        "importPath": "helpers.DictConvert",
        "description": "helpers.DictConvert",
        "isExtraImport": true,
        "detail": "helpers.DictConvert",
        "documentation": {}
    },
    {
        "label": "convert_candidate_to_text",
        "importPath": "helpers.DictConvert",
        "description": "helpers.DictConvert",
        "isExtraImport": true,
        "detail": "helpers.DictConvert",
        "documentation": {}
    },
    {
        "label": "convert_scholarship_to_text",
        "importPath": "helpers.DictConvert",
        "description": "helpers.DictConvert",
        "isExtraImport": true,
        "detail": "helpers.DictConvert",
        "documentation": {}
    },
    {
        "label": "to_dict",
        "importPath": "helpers.DictConvert",
        "description": "helpers.DictConvert",
        "isExtraImport": true,
        "detail": "helpers.DictConvert",
        "documentation": {}
    },
    {
        "label": "to_dict",
        "importPath": "helpers.DictConvert",
        "description": "helpers.DictConvert",
        "isExtraImport": true,
        "detail": "helpers.DictConvert",
        "documentation": {}
    },
    {
        "label": "to_dict",
        "importPath": "helpers.DictConvert",
        "description": "helpers.DictConvert",
        "isExtraImport": true,
        "detail": "helpers.DictConvert",
        "documentation": {}
    },
    {
        "label": "to_dict",
        "importPath": "helpers.DictConvert",
        "description": "helpers.DictConvert",
        "isExtraImport": true,
        "detail": "helpers.DictConvert",
        "documentation": {}
    },
    {
        "label": "to_dict",
        "importPath": "helpers.DictConvert",
        "description": "helpers.DictConvert",
        "isExtraImport": true,
        "detail": "helpers.DictConvert",
        "documentation": {}
    },
    {
        "label": "to_dict",
        "importPath": "helpers.DictConvert",
        "description": "helpers.DictConvert",
        "isExtraImport": true,
        "detail": "helpers.DictConvert",
        "documentation": {}
    },
    {
        "label": "to_dict",
        "importPath": "helpers.DictConvert",
        "description": "helpers.DictConvert",
        "isExtraImport": true,
        "detail": "helpers.DictConvert",
        "documentation": {}
    },
    {
        "label": "to_dict",
        "importPath": "helpers.DictConvert",
        "description": "helpers.DictConvert",
        "isExtraImport": true,
        "detail": "helpers.DictConvert",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "crawl_scholarship_description",
        "importPath": "ai.WebScraper.services.ScholarshipURLs",
        "description": "ai.WebScraper.services.ScholarshipURLs",
        "isExtraImport": true,
        "detail": "ai.WebScraper.services.ScholarshipURLs",
        "documentation": {}
    },
    {
        "label": "ScholarshipURLs",
        "importPath": "ai.WebScraper.services",
        "description": "ai.WebScraper.services",
        "isExtraImport": true,
        "detail": "ai.WebScraper.services",
        "documentation": {}
    },
    {
        "label": "WebScraper",
        "importPath": "ai.WebScraper.services",
        "description": "ai.WebScraper.services",
        "isExtraImport": true,
        "detail": "ai.WebScraper.services",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "langchain.tools",
        "description": "langchain.tools",
        "isExtraImport": true,
        "detail": "langchain.tools",
        "documentation": {}
    },
    {
        "label": "BaseTool",
        "importPath": "langchain.tools",
        "description": "langchain.tools",
        "isExtraImport": true,
        "detail": "langchain.tools",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "ChatOpenAI",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "OpenAIEmbeddings",
        "importPath": "langchain_openai",
        "description": "langchain_openai",
        "isExtraImport": true,
        "detail": "langchain_openai",
        "documentation": {}
    },
    {
        "label": "AgentExecutor",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "create_openai_functions_agent",
        "importPath": "langchain.agents",
        "description": "langchain.agents",
        "isExtraImport": true,
        "detail": "langchain.agents",
        "documentation": {}
    },
    {
        "label": "ChatPromptTemplate",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "MessagesPlaceholder",
        "importPath": "langchain_core.prompts",
        "description": "langchain_core.prompts",
        "isExtraImport": true,
        "detail": "langchain_core.prompts",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "save_chat_history",
        "importPath": "database.chat_history_service",
        "description": "database.chat_history_service",
        "isExtraImport": true,
        "detail": "database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "get_chat_history",
        "importPath": "database.chat_history_service",
        "description": "database.chat_history_service",
        "isExtraImport": true,
        "detail": "database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "format_chat_history",
        "importPath": "database.chat_history_service",
        "description": "database.chat_history_service",
        "isExtraImport": true,
        "detail": "database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "get_next_thread_id",
        "importPath": "database.chat_history_service",
        "description": "database.chat_history_service",
        "isExtraImport": true,
        "detail": "database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "get_next_thread_id",
        "importPath": "database.chat_history_service",
        "description": "database.chat_history_service",
        "isExtraImport": true,
        "detail": "database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "get_user_threads",
        "importPath": "database.chat_history_service",
        "description": "database.chat_history_service",
        "isExtraImport": true,
        "detail": "database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "get_chat_history",
        "importPath": "database.chat_history_service",
        "description": "database.chat_history_service",
        "isExtraImport": true,
        "detail": "database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "delete_chat_history",
        "importPath": "database.chat_history_service",
        "description": "database.chat_history_service",
        "isExtraImport": true,
        "detail": "database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "AIMessageChunk",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "BaseCallbackHandler",
        "importPath": "langchain.callbacks.base",
        "description": "langchain.callbacks.base",
        "isExtraImport": true,
        "detail": "langchain.callbacks.base",
        "documentation": {}
    },
    {
        "label": "search_scholarships",
        "importPath": "database.scholarship_service",
        "description": "database.scholarship_service",
        "isExtraImport": true,
        "detail": "database.scholarship_service",
        "documentation": {}
    },
    {
        "label": "get_scholarship_by_id",
        "importPath": "database.scholarship_service",
        "description": "database.scholarship_service",
        "isExtraImport": true,
        "detail": "database.scholarship_service",
        "documentation": {}
    },
    {
        "label": "get_scholarship_field",
        "importPath": "database.scholarship_service",
        "description": "database.scholarship_service",
        "isExtraImport": true,
        "detail": "database.scholarship_service",
        "documentation": {}
    },
    {
        "label": "retrieve_documents",
        "importPath": "ai.core.rag.document_retriever",
        "description": "ai.core.rag.document_retriever",
        "isExtraImport": true,
        "detail": "ai.core.rag.document_retriever",
        "documentation": {}
    },
    {
        "label": "PydanticOutputParser",
        "importPath": "langchain_core.output_parsers",
        "description": "langchain_core.output_parsers",
        "isExtraImport": true,
        "detail": "langchain_core.output_parsers",
        "documentation": {}
    },
    {
        "label": "ChatPromptTemplate",
        "importPath": "langchain.prompts",
        "description": "langchain.prompts",
        "isExtraImport": true,
        "detail": "langchain.prompts",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ai.core.Parsers",
        "description": "ai.core.Parsers",
        "isExtraImport": true,
        "detail": "ai.core.Parsers",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ai.core.Prompts",
        "description": "ai.core.Prompts",
        "isExtraImport": true,
        "detail": "ai.core.Prompts",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "StreamingResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.User",
        "description": "models.User",
        "isExtraImport": true,
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.User",
        "description": "models.User",
        "isExtraImport": true,
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.User",
        "description": "models.User",
        "isExtraImport": true,
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.User",
        "description": "models.User",
        "isExtraImport": true,
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.User",
        "description": "models.User",
        "isExtraImport": true,
        "detail": "models.User",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "schemas.Auth.auth",
        "description": "schemas.Auth.auth",
        "isExtraImport": true,
        "detail": "schemas.Auth.auth",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "schemas.Auth.auth",
        "description": "schemas.Auth.auth",
        "isExtraImport": true,
        "detail": "schemas.Auth.auth",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "schemas.Auth.auth",
        "description": "schemas.Auth.auth",
        "isExtraImport": true,
        "detail": "schemas.Auth.auth",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "schemas.Auth.auth",
        "description": "schemas.Auth.auth",
        "isExtraImport": true,
        "detail": "schemas.Auth.auth",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "schemas.Auth.auth",
        "description": "schemas.Auth.auth",
        "isExtraImport": true,
        "detail": "schemas.Auth.auth",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "importPath": "schemas.Auth.auth",
        "description": "schemas.Auth.auth",
        "isExtraImport": true,
        "detail": "schemas.Auth.auth",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.Profile.Personal",
        "description": "schemas.Profile.Personal",
        "isExtraImport": true,
        "detail": "schemas.Profile.Personal",
        "documentation": {}
    },
    {
        "label": "PersonalCreateRequest",
        "importPath": "schemas.Profile.Personal",
        "description": "schemas.Profile.Personal",
        "isExtraImport": true,
        "detail": "schemas.Profile.Personal",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.Profile.Personal",
        "description": "schemas.Profile.Personal",
        "isExtraImport": true,
        "detail": "schemas.Profile.Personal",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.Profile.Personal",
        "description": "schemas.Profile.Personal",
        "isExtraImport": true,
        "detail": "schemas.Profile.Personal",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.Profile.Personal",
        "description": "schemas.Profile.Personal",
        "isExtraImport": true,
        "detail": "schemas.Profile.Personal",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "importPath": "services.Auth.auth",
        "description": "services.Auth.auth",
        "isExtraImport": true,
        "detail": "services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "services.Auth.utils",
        "description": "services.Auth.utils",
        "isExtraImport": true,
        "detail": "services.Auth.utils",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "importPath": "services.Auth.utils",
        "description": "services.Auth.utils",
        "isExtraImport": true,
        "detail": "services.Auth.utils",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "importPath": "services.Auth.utils",
        "description": "services.Auth.utils",
        "isExtraImport": true,
        "detail": "services.Auth.utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "services.Auth.utils",
        "description": "services.Auth.utils",
        "isExtraImport": true,
        "detail": "services.Auth.utils",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "PostScholarshipRequest",
        "importPath": "schemas.CRUD.Scholarship",
        "description": "schemas.CRUD.Scholarship",
        "isExtraImport": true,
        "detail": "schemas.CRUD.Scholarship",
        "documentation": {}
    },
    {
        "label": "PostScholarshipRequest",
        "importPath": "schemas.CRUD.Scholarship",
        "description": "schemas.CRUD.Scholarship",
        "isExtraImport": true,
        "detail": "schemas.CRUD.Scholarship",
        "documentation": {}
    },
    {
        "label": "PostScholarshipRequest",
        "importPath": "schemas.CRUD.Scholarship",
        "description": "schemas.CRUD.Scholarship",
        "isExtraImport": true,
        "detail": "schemas.CRUD.Scholarship",
        "documentation": {}
    },
    {
        "label": "PostScholarshipRequest",
        "importPath": "schemas.CRUD.Scholarship",
        "description": "schemas.CRUD.Scholarship",
        "isExtraImport": true,
        "detail": "schemas.CRUD.Scholarship",
        "documentation": {}
    },
    {
        "label": "cal_weights",
        "importPath": "helpers.CriteriaWeights",
        "description": "helpers.CriteriaWeights",
        "isExtraImport": true,
        "detail": "helpers.CriteriaWeights",
        "documentation": {}
    },
    {
        "label": "retriever_manager",
        "importPath": "services.RetrieverManager",
        "description": "services.RetrieverManager",
        "isExtraImport": true,
        "detail": "services.RetrieverManager",
        "documentation": {}
    },
    {
        "label": "scholarship_to_description",
        "importPath": "services.CRUD.Scholarship",
        "description": "services.CRUD.Scholarship",
        "isExtraImport": true,
        "detail": "services.CRUD.Scholarship",
        "documentation": {}
    },
    {
        "label": "extract_scholarship",
        "importPath": "ai.ProfileMatching.services.ScholarshipExtract",
        "description": "ai.ProfileMatching.services.ScholarshipExtract",
        "isExtraImport": true,
        "detail": "ai.ProfileMatching.services.ScholarshipExtract",
        "documentation": {}
    },
    {
        "label": "recommend_scholarship",
        "importPath": "ai.Recommendation.ScholarshipRecommend",
        "description": "ai.Recommendation.ScholarshipRecommend",
        "isExtraImport": true,
        "detail": "ai.Recommendation.ScholarshipRecommend",
        "documentation": {}
    },
    {
        "label": "CommunityPost",
        "importPath": "models.CommunityPost",
        "description": "models.CommunityPost",
        "isExtraImport": true,
        "detail": "models.CommunityPost",
        "documentation": {}
    },
    {
        "label": "CommunityReaction",
        "importPath": "models.CommunityReaction",
        "description": "models.CommunityReaction",
        "isExtraImport": true,
        "detail": "models.CommunityReaction",
        "documentation": {}
    },
    {
        "label": "CommunityComment",
        "importPath": "models.CommunityComment",
        "description": "models.CommunityComment",
        "isExtraImport": true,
        "detail": "models.CommunityComment",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.Community.Posts",
        "description": "schemas.Community.Posts",
        "isExtraImport": true,
        "detail": "schemas.Community.Posts",
        "documentation": {}
    },
    {
        "label": "CommunityCommentReaction",
        "importPath": "models.CommunityCommentReaction",
        "description": "models.CommunityCommentReaction",
        "isExtraImport": true,
        "detail": "models.CommunityCommentReaction",
        "documentation": {}
    },
    {
        "label": "SavedPost",
        "importPath": "models.SavedPost",
        "description": "models.SavedPost",
        "isExtraImport": true,
        "detail": "models.SavedPost",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "Achievement",
        "importPath": "models.Achievement",
        "description": "models.Achievement",
        "isExtraImport": true,
        "detail": "models.Achievement",
        "documentation": {}
    },
    {
        "label": "Achievement",
        "importPath": "models.Achievement",
        "description": "models.Achievement",
        "isExtraImport": true,
        "detail": "models.Achievement",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.Profile.Achievement",
        "description": "schemas.Profile.Achievement",
        "isExtraImport": true,
        "detail": "schemas.Profile.Achievement",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.Profile.Achievement",
        "description": "schemas.Profile.Achievement",
        "isExtraImport": true,
        "detail": "schemas.Profile.Achievement",
        "documentation": {}
    },
    {
        "label": "profile_manager",
        "importPath": "services.ProfileManager",
        "description": "services.ProfileManager",
        "isExtraImport": true,
        "detail": "services.ProfileManager",
        "documentation": {}
    },
    {
        "label": "profile_manager",
        "importPath": "services.ProfileManager",
        "description": "services.ProfileManager",
        "isExtraImport": true,
        "detail": "services.ProfileManager",
        "documentation": {}
    },
    {
        "label": "profile_manager",
        "importPath": "services.ProfileManager",
        "description": "services.ProfileManager",
        "isExtraImport": true,
        "detail": "services.ProfileManager",
        "documentation": {}
    },
    {
        "label": "profile_manager",
        "importPath": "services.ProfileManager",
        "description": "services.ProfileManager",
        "isExtraImport": true,
        "detail": "services.ProfileManager",
        "documentation": {}
    },
    {
        "label": "profile_manager",
        "importPath": "services.ProfileManager",
        "description": "services.ProfileManager",
        "isExtraImport": true,
        "detail": "services.ProfileManager",
        "documentation": {}
    },
    {
        "label": "profile_manager",
        "importPath": "services.ProfileManager",
        "description": "services.ProfileManager",
        "isExtraImport": true,
        "detail": "services.ProfileManager",
        "documentation": {}
    },
    {
        "label": "profile_manager",
        "importPath": "services.ProfileManager",
        "description": "services.ProfileManager",
        "isExtraImport": true,
        "detail": "services.ProfileManager",
        "documentation": {}
    },
    {
        "label": "Certification",
        "importPath": "models.Certification",
        "description": "models.Certification",
        "isExtraImport": true,
        "detail": "models.Certification",
        "documentation": {}
    },
    {
        "label": "Certification",
        "importPath": "models.Certification",
        "description": "models.Certification",
        "isExtraImport": true,
        "detail": "models.Certification",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.Profile.Certification",
        "description": "schemas.Profile.Certification",
        "isExtraImport": true,
        "detail": "schemas.Profile.Certification",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.Profile.Certification",
        "description": "schemas.Profile.Certification",
        "isExtraImport": true,
        "detail": "schemas.Profile.Certification",
        "documentation": {}
    },
    {
        "label": "Education",
        "importPath": "models.Education",
        "description": "models.Education",
        "isExtraImport": true,
        "detail": "models.Education",
        "documentation": {}
    },
    {
        "label": "Education",
        "importPath": "models.Education",
        "description": "models.Education",
        "isExtraImport": true,
        "detail": "models.Education",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.Profile.Education",
        "description": "schemas.Profile.Education",
        "isExtraImport": true,
        "detail": "schemas.Profile.Education",
        "documentation": {}
    },
    {
        "label": "EducationUpdateRequest",
        "importPath": "schemas.Profile.Education",
        "description": "schemas.Profile.Education",
        "isExtraImport": true,
        "detail": "schemas.Profile.Education",
        "documentation": {}
    },
    {
        "label": "EducationCreateRequest",
        "importPath": "schemas.Profile.Education",
        "description": "schemas.Profile.Education",
        "isExtraImport": true,
        "detail": "schemas.Profile.Education",
        "documentation": {}
    },
    {
        "label": "EducationDeleteRequest",
        "importPath": "schemas.Profile.Education",
        "description": "schemas.Profile.Education",
        "isExtraImport": true,
        "detail": "schemas.Profile.Education",
        "documentation": {}
    },
    {
        "label": "Experience",
        "importPath": "models.Experience",
        "description": "models.Experience",
        "isExtraImport": true,
        "detail": "models.Experience",
        "documentation": {}
    },
    {
        "label": "Experience",
        "importPath": "models.Experience",
        "description": "models.Experience",
        "isExtraImport": true,
        "detail": "models.Experience",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.Profile.Experience",
        "description": "schemas.Profile.Experience",
        "isExtraImport": true,
        "detail": "schemas.Profile.Experience",
        "documentation": {}
    },
    {
        "label": "ExperienceCreateRequest",
        "importPath": "schemas.Profile.Experience",
        "description": "schemas.Profile.Experience",
        "isExtraImport": true,
        "detail": "schemas.Profile.Experience",
        "documentation": {}
    },
    {
        "label": "ExperienceUpdateRequest",
        "importPath": "schemas.Profile.Experience",
        "description": "schemas.Profile.Experience",
        "isExtraImport": true,
        "detail": "schemas.Profile.Experience",
        "documentation": {}
    },
    {
        "label": "ExperienceDeleteRequest",
        "importPath": "schemas.Profile.Experience",
        "description": "schemas.Profile.Experience",
        "isExtraImport": true,
        "detail": "schemas.Profile.Experience",
        "documentation": {}
    },
    {
        "label": "Publication",
        "importPath": "models.Publication",
        "description": "models.Publication",
        "isExtraImport": true,
        "detail": "models.Publication",
        "documentation": {}
    },
    {
        "label": "Publication",
        "importPath": "models.Publication",
        "description": "models.Publication",
        "isExtraImport": true,
        "detail": "models.Publication",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "models.Reference",
        "description": "models.Reference",
        "isExtraImport": true,
        "detail": "models.Reference",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "models.Reference",
        "description": "models.Reference",
        "isExtraImport": true,
        "detail": "models.Reference",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.Profile.Publication",
        "description": "schemas.Profile.Publication",
        "isExtraImport": true,
        "detail": "schemas.Profile.Publication",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.Profile.Publication",
        "description": "schemas.Profile.Publication",
        "isExtraImport": true,
        "detail": "schemas.Profile.Publication",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "schemas.Profile.Reference",
        "description": "schemas.Profile.Reference",
        "isExtraImport": true,
        "detail": "schemas.Profile.Reference",
        "documentation": {}
    },
    {
        "label": "ReferenceCreateRequest",
        "importPath": "schemas.Profile.Reference",
        "description": "schemas.Profile.Reference",
        "isExtraImport": true,
        "detail": "schemas.Profile.Reference",
        "documentation": {}
    },
    {
        "label": "ReferenceUpdateRequest",
        "importPath": "schemas.Profile.Reference",
        "description": "schemas.Profile.Reference",
        "isExtraImport": true,
        "detail": "schemas.Profile.Reference",
        "documentation": {}
    },
    {
        "label": "ReferenceDeleteRequest",
        "importPath": "schemas.Profile.Reference",
        "description": "schemas.Profile.Reference",
        "isExtraImport": true,
        "detail": "schemas.Profile.Reference",
        "documentation": {}
    },
    {
        "label": "NamedTemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Education",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Experience",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Achievement",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Publication",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Scholarship",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Education",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Achievement",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Experience",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Publication",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "resume_matching",
        "importPath": "ai.ProfileMatching.ProfileMatching",
        "description": "ai.ProfileMatching.ProfileMatching",
        "isExtraImport": true,
        "detail": "ai.ProfileMatching.ProfileMatching",
        "documentation": {}
    },
    {
        "label": "search",
        "importPath": "ai.SmartSearch.SmartSearch",
        "description": "ai.SmartSearch.SmartSearch",
        "isExtraImport": true,
        "detail": "ai.SmartSearch.SmartSearch",
        "documentation": {}
    },
    {
        "label": "get_answer",
        "importPath": "ai.core.service.ai_service",
        "description": "ai.core.service.ai_service",
        "isExtraImport": true,
        "detail": "ai.core.service.ai_service",
        "documentation": {}
    },
    {
        "label": "get_answer_stream",
        "importPath": "ai.core.service.ai_service",
        "description": "ai.core.service.ai_service",
        "isExtraImport": true,
        "detail": "ai.core.service.ai_service",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DBAPIError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "DBAPIError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.BaseClass",
        "description": "models.BaseClass",
        "isExtraImport": true,
        "detail": "models.BaseClass",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "TextLoader",
        "importPath": "langchain_community.document_loaders.text",
        "description": "langchain_community.document_loaders.text",
        "isExtraImport": true,
        "detail": "langchain_community.document_loaders.text",
        "documentation": {}
    },
    {
        "label": "RecursiveCharacterTextSplitter",
        "importPath": "langchain_text_splitters",
        "description": "langchain_text_splitters",
        "isExtraImport": true,
        "detail": "langchain_text_splitters",
        "documentation": {}
    },
    {
        "label": "decimal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "decimal",
        "description": "decimal",
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSON",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "CITEXT",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "CITEXT",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "CITEXT",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "UserRoleEnum",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "UserRoleEnum",
        "importPath": "helpers.Enums",
        "description": "helpers.Enums",
        "isExtraImport": true,
        "detail": "helpers.Enums",
        "documentation": {}
    },
    {
        "label": "as_declarative",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declared_attr",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "dateutil.parser",
        "description": "dateutil.parser",
        "isExtraImport": true,
        "detail": "dateutil.parser",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "DBSessionMiddleware",
        "importPath": "fastapi_sqlalchemy",
        "description": "fastapi_sqlalchemy",
        "isExtraImport": true,
        "detail": "fastapi_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "starlette.middleware.cors",
        "description": "starlette.middleware.cors",
        "isExtraImport": true,
        "detail": "starlette.middleware.cors",
        "documentation": {}
    },
    {
        "label": "Education",
        "importPath": "api.v1.Profile",
        "description": "api.v1.Profile",
        "isExtraImport": true,
        "detail": "api.v1.Profile",
        "documentation": {}
    },
    {
        "label": "Experience",
        "importPath": "api.v1.Profile",
        "description": "api.v1.Profile",
        "isExtraImport": true,
        "detail": "api.v1.Profile",
        "documentation": {}
    },
    {
        "label": "Achievement",
        "importPath": "api.v1.Profile",
        "description": "api.v1.Profile",
        "isExtraImport": true,
        "detail": "api.v1.Profile",
        "documentation": {}
    },
    {
        "label": "Publication",
        "importPath": "api.v1.Profile",
        "description": "api.v1.Profile",
        "isExtraImport": true,
        "detail": "api.v1.Profile",
        "documentation": {}
    },
    {
        "label": "Reference",
        "importPath": "api.v1.Profile",
        "description": "api.v1.Profile",
        "isExtraImport": true,
        "detail": "api.v1.Profile",
        "documentation": {}
    },
    {
        "label": "Personal",
        "importPath": "api.v1.Profile",
        "description": "api.v1.Profile",
        "isExtraImport": true,
        "detail": "api.v1.Profile",
        "documentation": {}
    },
    {
        "label": "Profile",
        "importPath": "api.v1.Profile",
        "description": "api.v1.Profile",
        "isExtraImport": true,
        "detail": "api.v1.Profile",
        "documentation": {}
    },
    {
        "label": "Certification",
        "importPath": "api.v1.Profile",
        "description": "api.v1.Profile",
        "isExtraImport": true,
        "detail": "api.v1.Profile",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "api.v1.Auth.auth",
        "description": "api.v1.Auth.auth",
        "isExtraImport": true,
        "detail": "api.v1.Auth.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "api.v1.CRUD.Scholarship",
        "description": "api.v1.CRUD.Scholarship",
        "isExtraImport": true,
        "detail": "api.v1.CRUD.Scholarship",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "api.v1.ProfileMatching.ProfileMatching",
        "description": "api.v1.ProfileMatching.ProfileMatching",
        "isExtraImport": true,
        "detail": "api.v1.ProfileMatching.ProfileMatching",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "api.v1.SmartSearch.SmartSearch",
        "description": "api.v1.SmartSearch.SmartSearch",
        "isExtraImport": true,
        "detail": "api.v1.SmartSearch.SmartSearch",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "api.v1.chat.routes",
        "description": "api.v1.chat.routes",
        "isExtraImport": true,
        "detail": "api.v1.chat.routes",
        "documentation": {}
    },
    {
        "label": "Posts",
        "importPath": "api.v1.Community",
        "description": "api.v1.Community",
        "isExtraImport": true,
        "detail": "api.v1.Community",
        "documentation": {}
    },
    {
        "label": "Connections",
        "importPath": "api.v1.Community",
        "description": "api.v1.Community",
        "isExtraImport": true,
        "detail": "api.v1.Community",
        "documentation": {}
    },
    {
        "label": "Upload",
        "importPath": "api.v1.Community",
        "description": "api.v1.Community",
        "isExtraImport": true,
        "detail": "api.v1.Community",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "profile_match",
        "kind": 2,
        "importPath": "backend.ai.ProfileMatching.services.ProfileMatch",
        "description": "backend.ai.ProfileMatching.services.ProfileMatch",
        "peekOfCode": "def profile_match(profile, scholarship):\n    criteria_ws = scholarship[\"criteria_weights\"]\n    scholarship_ordinal = scholarship[\"ordinal_criteria\"]\n    profile_ordinal = profile[\"ordinal_criteria\"]\n    scholarship_binary = scholarship[\"binary_criteria\"]\n    profile_binary = profile[\"binary_criteria\"]\n    ordinal_point, ordinal_evidence = match_ordinal_criteria(profile_ordinal, scholarship_ordinal, criteria_ws)\n    binary_point, binary_evidence = match_binary_criteria(profile_binary, scholarship_binary)\n    evidence = {\n        \"criterias\": ordinal_evidence,",
        "detail": "backend.ai.ProfileMatching.services.ProfileMatch",
        "documentation": {}
    },
    {
        "label": "match_ordinal_criteria",
        "kind": 2,
        "importPath": "backend.ai.ProfileMatching.services.ProfileMatch",
        "description": "backend.ai.ProfileMatching.services.ProfileMatch",
        "peekOfCode": "def match_ordinal_criteria(profile, scholarship, weights):\n    point = 0\n    evidence = {}\n    for key in [\"education\", \"experience\", \"research\", \"achievement\", \"certification\"]:\n        if not key in scholarship.keys() or not key in profile.keys():\n            raise ValueError(f\"Không tìm thấy key {key}\")\n        profile_ = np.array(profile[key])\n        scholarship_ = np.array(scholarship[key])\n        point += profile_.dot(scholarship_) * weights[key]\n        evidence[key] = {",
        "detail": "backend.ai.ProfileMatching.services.ProfileMatch",
        "documentation": {}
    },
    {
        "label": "match_binary_criteria",
        "kind": 2,
        "importPath": "backend.ai.ProfileMatching.services.ProfileMatch",
        "description": "backend.ai.ProfileMatching.services.ProfileMatch",
        "peekOfCode": "def match_binary_criteria(profile, scholarship, weight):\n    point = 0\n    evidence = []\n    for key in [\"gender\", \"nationality\"]:\n        gender_required = scholarship.get(key, \"\")\n        if gender_required != \"\" and gender_required != profile[key]:\n            evidence += f\"{key.title()} required: {gender_required} and Profile: {profile[key]}\"\n            continue\n        point += 1\n        evidence += f\"{key.title()} required: {gender_required} and Profile: {profile[key]}\"",
        "detail": "backend.ai.ProfileMatching.services.ProfileMatch",
        "documentation": {}
    },
    {
        "label": "extract_resume",
        "kind": 2,
        "importPath": "backend.ai.ProfileMatching.services.ResumeExtract",
        "description": "backend.ai.ProfileMatching.services.ResumeExtract",
        "peekOfCode": "def extract_resume(pages):\n    return get_chat_completion(\n        task = \"resume_extract\",\n        params = {\n            \"question\": \"Evaluate the information from the CV against these criteria.\",\n            \"context\": pages\n        }\n    )\nasync def read_resume(file_path):\n    loader = PyPDFLoader(file_path)",
        "detail": "backend.ai.ProfileMatching.services.ResumeExtract",
        "documentation": {}
    },
    {
        "label": "extract_scholarship",
        "kind": 2,
        "importPath": "backend.ai.ProfileMatching.services.ScholarshipExtract",
        "description": "backend.ai.ProfileMatching.services.ScholarshipExtract",
        "peekOfCode": "def extract_scholarship(description):\n    return get_chat_completion(\n        task = \"scholarship_extract\",\n        params = {\n            \"question\": \"Extract requirements from the scholarship description based on these criteria.\",\n            \"description\": description\n        }\n    )",
        "detail": "backend.ai.ProfileMatching.services.ScholarshipExtract",
        "documentation": {}
    },
    {
        "label": "preference_matching",
        "kind": 2,
        "importPath": "backend.ai.ProfileMatching.ProfileMatching",
        "description": "backend.ai.ProfileMatching.ProfileMatching",
        "peekOfCode": "def preference_matching(profile, scholarship):\n    pass\ndef success_rate(match_percentages, criteria_weights):\n    if isinstance(match_percentages, list):\n        match_percentages = np.array(match_percentages)\n    if isinstance(criteria_weights, list):\n        criteria_weights = np.array(criteria_weights)\n    return np.sum(np.dot(match_percentages, criteria_weights))\ndef preference_rate():\n    pass",
        "detail": "backend.ai.ProfileMatching.ProfileMatching",
        "documentation": {}
    },
    {
        "label": "success_rate",
        "kind": 2,
        "importPath": "backend.ai.ProfileMatching.ProfileMatching",
        "description": "backend.ai.ProfileMatching.ProfileMatching",
        "peekOfCode": "def success_rate(match_percentages, criteria_weights):\n    if isinstance(match_percentages, list):\n        match_percentages = np.array(match_percentages)\n    if isinstance(criteria_weights, list):\n        criteria_weights = np.array(criteria_weights)\n    return np.sum(np.dot(match_percentages, criteria_weights))\ndef preference_rate():\n    pass\ndef preference_rate(success_rate, preference):\n    pass",
        "detail": "backend.ai.ProfileMatching.ProfileMatching",
        "documentation": {}
    },
    {
        "label": "preference_rate",
        "kind": 2,
        "importPath": "backend.ai.ProfileMatching.ProfileMatching",
        "description": "backend.ai.ProfileMatching.ProfileMatching",
        "peekOfCode": "def preference_rate():\n    pass\ndef preference_rate(success_rate, preference):\n    pass",
        "detail": "backend.ai.ProfileMatching.ProfileMatching",
        "documentation": {}
    },
    {
        "label": "preference_rate",
        "kind": 2,
        "importPath": "backend.ai.ProfileMatching.ProfileMatching",
        "description": "backend.ai.ProfileMatching.ProfileMatching",
        "peekOfCode": "def preference_rate(success_rate, preference):\n    pass",
        "detail": "backend.ai.ProfileMatching.ProfileMatching",
        "documentation": {}
    },
    {
        "label": "load_scholarships",
        "kind": 2,
        "importPath": "backend.ai.Recommendation.services.ScholarshipLoader",
        "description": "backend.ai.Recommendation.services.ScholarshipLoader",
        "peekOfCode": "def load_scholarships(db):\n    scholarships = Scholarship.get(db = db, limit = None, offset = None)\n    scholarship_criterias = []\n    criteria_weights = []\n    for scholarship in scholarships:\n        tmp = scholarship[\"scholarship_criteria\"]\n        scholarship_criteria = []\n        criteria_weight = []\n        try:\n            tmp = ast.literal_eval(tmp)",
        "detail": "backend.ai.Recommendation.services.ScholarshipLoader",
        "documentation": {}
    },
    {
        "label": "criterias",
        "kind": 5,
        "importPath": "backend.ai.Recommendation.services.ScholarshipLoader",
        "description": "backend.ai.Recommendation.services.ScholarshipLoader",
        "peekOfCode": "criterias = [\"education\", \"experience\", \"research\", \"certification\", \"achievement\"]\ndef load_scholarships(db):\n    scholarships = Scholarship.get(db = db, limit = None, offset = None)\n    scholarship_criterias = []\n    criteria_weights = []\n    for scholarship in scholarships:\n        tmp = scholarship[\"scholarship_criteria\"]\n        scholarship_criteria = []\n        criteria_weight = []\n        try:",
        "detail": "backend.ai.Recommendation.services.ScholarshipLoader",
        "documentation": {}
    },
    {
        "label": "recommend_scholarship",
        "kind": 2,
        "importPath": "backend.ai.Recommendation.ScholarshipRecommend",
        "description": "backend.ai.Recommendation.ScholarshipRecommend",
        "peekOfCode": "def recommend_scholarship(db, user):\n    scholarship_criterias, criteria_weights, scholarships = load_scholarships(db)\n    profile = db.query(Profile).filter(Profile.user_id == user.id).first()\n    profile_criteria = profile.criteria\n    profile_criteria_np = []\n    for criteria in criterias:\n        profile_criteria_np.append(profile_criteria[criteria][\"score\"])\n    print(profile_criteria_np, flush=True)\n    profile_criteria_np = np.array(profile_criteria_np)\n    points = []",
        "detail": "backend.ai.Recommendation.ScholarshipRecommend",
        "documentation": {}
    },
    {
        "label": "Retriever",
        "kind": 6,
        "importPath": "backend.ai.SmartSearch.v1.Retriever",
        "description": "backend.ai.SmartSearch.v1.Retriever",
        "peekOfCode": "class Retriever:\n    def __init__(self):\n        self.t = 0.6\n        self.save_local = os.path.join(settings.BASE_DIR, \"artifacts\", \"chatbot\", \"vectordb\")\n        self.build()\n    def get_relevant_by_threshold(self, query: str) -> str:\n        embedding = openai_embeddings.embed_query(query)\n        index_size = self.retriever.vectorstore.index.ntotal\n        docs_and_scores = self.retriever.vectorstore.similarity_search_with_score_by_vector(\n            embedding, k=index_size",
        "detail": "backend.ai.SmartSearch.v1.Retriever",
        "documentation": {}
    },
    {
        "label": "retriever",
        "kind": 5,
        "importPath": "backend.ai.SmartSearch.v1.Retriever",
        "description": "backend.ai.SmartSearch.v1.Retriever",
        "peekOfCode": "retriever = Retriever()",
        "detail": "backend.ai.SmartSearch.v1.Retriever",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "backend.ai.SmartSearch.SmartSearch",
        "description": "backend.ai.SmartSearch.SmartSearch",
        "peekOfCode": "def search(db, query):\n    docs = retriever.get_relevant_by_threshold(query = query)\n    scholarship_ids = get_chat_completion(\n        task = \"scholarship_select\",\n        params = {\n            \"scholarships\": docs,\n            \"question\": query\n        }\n    )\n    resp_objs = []",
        "detail": "backend.ai.SmartSearch.SmartSearch",
        "documentation": {}
    },
    {
        "label": "get_driver",
        "kind": 2,
        "importPath": "backend.ai.WebScraper.services.ScholarshipURLs",
        "description": "backend.ai.WebScraper.services.ScholarshipURLs",
        "peekOfCode": "def get_driver() -> Generator[webdriver.Chrome, None, None]:\n    options = webdriver.ChromeOptions()\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')\n    options.add_argument('--disable-logging')\n    options.add_experimental_option('excludeSwitches', ['enable-logging'])\n    driver = webdriver.Chrome(options)\n    try:\n        yield driver\n    finally:",
        "detail": "backend.ai.WebScraper.services.ScholarshipURLs",
        "documentation": {}
    },
    {
        "label": "crawl_scholarship_urls",
        "kind": 2,
        "importPath": "backend.ai.WebScraper.services.ScholarshipURLs",
        "description": "backend.ai.WebScraper.services.ScholarshipURLs",
        "peekOfCode": "def crawl_scholarship_urls(driver, num_pages: int = 1000) -> List[str]:\n    urls = []\n    driver.get(settings.CRAWL_URL)\n    accept_cookies(driver)\n    for _ in tqdm(range(num_pages)):\n        soup = BeautifulSoup(driver.page_source, \"html.parser\")\n        try:\n            WebDriverWait(driver, 3).until(\n                EC.presence_of_element_located((By.ID, \"middleContent\"))\n            )",
        "detail": "backend.ai.WebScraper.services.ScholarshipURLs",
        "documentation": {}
    },
    {
        "label": "crawl_scholarship_description",
        "kind": 2,
        "importPath": "backend.ai.WebScraper.services.ScholarshipURLs",
        "description": "backend.ai.WebScraper.services.ScholarshipURLs",
        "peekOfCode": "def crawl_scholarship_description(driver, url):\n    driver.get(url)\n    soup = BeautifulSoup(driver.page_source, \"html.parser\")\n    scholar_div = soup.find(\"div\", class_ = \"f_left col_left left_pod\")\n    if scholar_div:\n        return crawl_scholarship_description_v1(scholar_div)\n    nav_div = driver.find_element(By.CLASS_NAME, \"chuni_lft.chcol-2\")\n    ul_element = nav_div.find_element(By.TAG_NAME, \"ul\")\n    if ul_element:\n        return crawl_scholarship_description_v2(driver)",
        "detail": "backend.ai.WebScraper.services.ScholarshipURLs",
        "documentation": {}
    },
    {
        "label": "crawl_scholarship_description_v1",
        "kind": 2,
        "importPath": "backend.ai.WebScraper.services.ScholarshipURLs",
        "description": "backend.ai.WebScraper.services.ScholarshipURLs",
        "peekOfCode": "def crawl_scholarship_description_v1(div):\n    for tag in div.find_all(True):\n            if tag.name != 'a':\n                tag.unwrap()\n    for a in div.find_all('a'):\n        href = a.get('href')\n        a.attrs = {'href': href} if href else {}\n    scholar_div = div.prettify(formatter=\"minimal\")\n    return scholar_div\ndef crawl_scholarship_description_v2(driver):",
        "detail": "backend.ai.WebScraper.services.ScholarshipURLs",
        "documentation": {}
    },
    {
        "label": "crawl_scholarship_description_v2",
        "kind": 2,
        "importPath": "backend.ai.WebScraper.services.ScholarshipURLs",
        "description": "backend.ai.WebScraper.services.ScholarshipURLs",
        "peekOfCode": "def crawl_scholarship_description_v2(driver):\n    scholar_resp = \"\"\n    wait = WebDriverWait(driver, 3)\n    scholarship_tab = wait.until(EC.element_to_be_clickable((By.ID, \"menu-nav-tab-2\")))\n    requirements_tab = wait.until(EC.element_to_be_clickable((By.ID, \"menu-nav-tab-3\")))\n    driver.execute_script(\"arguments[0].scrollIntoView();\", scholarship_tab)\n    driver.execute_script(\"arguments[0].click();\", scholarship_tab)\n    soup = BeautifulSoup(driver.page_source, \"html.parser\")\n    scholarship_div = soup.find(\"div\", class_ = \"chfin\")\n    scholar_resp += crawl_scholarship_description_v1(scholarship_div)",
        "detail": "backend.ai.WebScraper.services.ScholarshipURLs",
        "documentation": {}
    },
    {
        "label": "accept_cookies",
        "kind": 2,
        "importPath": "backend.ai.WebScraper.services.ScholarshipURLs",
        "description": "backend.ai.WebScraper.services.ScholarshipURLs",
        "peekOfCode": "def accept_cookies(driver):\n    try:\n        wait = WebDriverWait(driver, 3)\n        cookie_button = wait.until(EC.element_to_be_clickable(\n            (By.XPATH, \"//button[contains(text(), 'Cho phép tất cả') or contains(text(), 'Accept')]\")))\n        cookie_button.click()\n    except:\n        pass",
        "detail": "backend.ai.WebScraper.services.ScholarshipURLs",
        "documentation": {}
    },
    {
        "label": "scrape",
        "kind": 2,
        "importPath": "backend.ai.WebScraper.services.WebScraper",
        "description": "backend.ai.WebScraper.services.WebScraper",
        "peekOfCode": "def scrape(driver, url):\n    scholar_div = crawl_scholarship_description(driver, url)\n    result = get_chat_completion(\n        task = \"web_scrape\",\n        params = {\n            \"question\": \"Dựa vào đoạn thông tin cung cấp, hãy trích xuất các trường thông tin bên trên.\",\n            \"context\": scholar_div\n        }\n    )\n    return dict(result)",
        "detail": "backend.ai.WebScraper.services.WebScraper",
        "documentation": {}
    },
    {
        "label": "graph_config",
        "kind": 5,
        "importPath": "backend.ai.WebScraper.services.WebScraper",
        "description": "backend.ai.WebScraper.services.WebScraper",
        "peekOfCode": "graph_config = {\n    \"llm\": {\n        \"api_key\": settings.OPENAPI_API_KEY,\n        \"model\": \"gpt-4o\",\n    },\n    \"verbose\": True,\n    \"headless\": True,\n    \"max_tokens\": 2048,\n    \"temperature\": 0.3,\n}",
        "detail": "backend.ai.WebScraper.services.WebScraper",
        "documentation": {}
    },
    {
        "label": "LLMsWebScraper",
        "kind": 6,
        "importPath": "backend.ai.WebScraper.WebScraper",
        "description": "backend.ai.WebScraper.WebScraper",
        "peekOfCode": "class LLMsWebScraper:\n    @staticmethod\n    def scrape(num_pages):\n        resp_objs = []\n        with ScholarshipURLs.get_driver() as driver:\n            urls = ScholarshipURLs.crawl_scholarship_urls(driver, num_pages)\n            for url in tqdm(urls, desc=\"Processing URLs\"):\n                try:\n                    result = WebScraper.scrape(driver, url)\n                    resp_objs.append(result)",
        "detail": "backend.ai.WebScraper.WebScraper",
        "documentation": {}
    },
    {
        "label": "retrieve_documents",
        "kind": 2,
        "importPath": "backend.ai.core.rag.document_retriever",
        "description": "backend.ai.core.rag.document_retriever",
        "peekOfCode": "def retrieve_documents(query: str) -> List[Dict]:\n    \"\"\"\n    Retrieve relevant documents based on query\n    In a production environment, this would use a vector database or semantic search.\n    This simplified version uses basic keyword matching.\n    Args:\n        query (str): Search query about scholarship concepts or tips\n    Returns:\n        List[Dict]: List of relevant document chunks\n    \"\"\"",
        "detail": "backend.ai.core.rag.document_retriever",
        "documentation": {}
    },
    {
        "label": "SCHOLARSHIP_DOCUMENTS",
        "kind": 5,
        "importPath": "backend.ai.core.rag.document_retriever",
        "description": "backend.ai.core.rag.document_retriever",
        "peekOfCode": "SCHOLARSHIP_DOCUMENTS = [\n    {\n        \"id\": \"doc1\",\n        \"title\": \"How to Write a Strong Scholarship Essay\",\n        \"content\": \"\"\"\n        Writing a compelling scholarship essay is crucial for standing out among applicants. Here are key tips:\n        1. Understand the prompt thoroughly before writing\n        2. Start with a captivating introduction that hooks the reader\n        3. Tell your personal story and highlight your unique qualities\n        4. Be specific about your achievements and goals",
        "detail": "backend.ai.core.rag.document_retriever",
        "documentation": {}
    },
    {
        "label": "CustomHandler",
        "kind": 6,
        "importPath": "backend.ai.core.service.ai_service",
        "description": "backend.ai.core.service.ai_service",
        "peekOfCode": "class CustomHandler(BaseCallbackHandler):\n    \"\"\"\n    Custom callback handler to track and process events during chat\n    \"\"\"\n    def __init__(self):\n        super().__init__()\ndef get_llm_and_agent() -> AgentExecutor:\n    system_message = \"\"\"You are a friendly and professional AI scholarship assistant of ScholarHub- an innovative platform a collaborative academic community ecosystem to comprehensively optimize the scholarship\nsearch and application process for students worldwide . Your task is to help students find scholarships and provide information about scholarship concepts.\nFor general questions or greetings:",
        "detail": "backend.ai.core.service.ai_service",
        "documentation": {}
    },
    {
        "label": "get_llm_and_agent",
        "kind": 2,
        "importPath": "backend.ai.core.service.ai_service",
        "description": "backend.ai.core.service.ai_service",
        "peekOfCode": "def get_llm_and_agent() -> AgentExecutor:\n    system_message = \"\"\"You are a friendly and professional AI scholarship assistant of ScholarHub- an innovative platform a collaborative academic community ecosystem to comprehensively optimize the scholarship\nsearch and application process for students worldwide . Your task is to help students find scholarships and provide information about scholarship concepts.\nFor general questions or greetings:\n- Respond naturally without using any tools\n- Be friendly and professional\n- Keep responses concise and helpful\n-Always ask if the user needs any clarification or assistance\nYou have three main capabilities:\n1. SCHOLARSHIP SEARCH",
        "detail": "backend.ai.core.service.ai_service",
        "documentation": {}
    },
    {
        "label": "get_answer",
        "kind": 2,
        "importPath": "backend.ai.core.service.ai_service",
        "description": "backend.ai.core.service.ai_service",
        "peekOfCode": "def get_answer(question: str, thread_id: str, user_id: str = \"default_user\") -> Dict:\n    \"\"\"\n    Get answer for a question\n    Args:\n        question (str): User's question\n        thread_id (str): Chat thread ID\n        user_id (str): User ID, defaults to \"default_user\" for backward compatibility\n    Returns:\n        str: AI's response\n    \"\"\"",
        "detail": "backend.ai.core.service.ai_service",
        "documentation": {}
    },
    {
        "label": "OPENAI_API_KEY",
        "kind": 5,
        "importPath": "backend.ai.core.service.ai_service",
        "description": "backend.ai.core.service.ai_service",
        "peekOfCode": "OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')\nif not OPENAI_API_KEY:\n    raise ValueError(\"OPENAI_API_KEY not found in environment variables\")\n# Create tools\nscholarship_search_tool = ScholarshipSearchTool()\nget_scholarship_details_tool = GetScholarshipDetailsTool()\nget_scholarship_field_tool = GetScholarshipFieldTool()\ndocument_retrieval_tool = DocumentRetrievalTool()\nclass CustomHandler(BaseCallbackHandler):\n    \"\"\"",
        "detail": "backend.ai.core.service.ai_service",
        "documentation": {}
    },
    {
        "label": "scholarship_search_tool",
        "kind": 5,
        "importPath": "backend.ai.core.service.ai_service",
        "description": "backend.ai.core.service.ai_service",
        "peekOfCode": "scholarship_search_tool = ScholarshipSearchTool()\nget_scholarship_details_tool = GetScholarshipDetailsTool()\nget_scholarship_field_tool = GetScholarshipFieldTool()\ndocument_retrieval_tool = DocumentRetrievalTool()\nclass CustomHandler(BaseCallbackHandler):\n    \"\"\"\n    Custom callback handler to track and process events during chat\n    \"\"\"\n    def __init__(self):\n        super().__init__()",
        "detail": "backend.ai.core.service.ai_service",
        "documentation": {}
    },
    {
        "label": "get_scholarship_details_tool",
        "kind": 5,
        "importPath": "backend.ai.core.service.ai_service",
        "description": "backend.ai.core.service.ai_service",
        "peekOfCode": "get_scholarship_details_tool = GetScholarshipDetailsTool()\nget_scholarship_field_tool = GetScholarshipFieldTool()\ndocument_retrieval_tool = DocumentRetrievalTool()\nclass CustomHandler(BaseCallbackHandler):\n    \"\"\"\n    Custom callback handler to track and process events during chat\n    \"\"\"\n    def __init__(self):\n        super().__init__()\ndef get_llm_and_agent() -> AgentExecutor:",
        "detail": "backend.ai.core.service.ai_service",
        "documentation": {}
    },
    {
        "label": "get_scholarship_field_tool",
        "kind": 5,
        "importPath": "backend.ai.core.service.ai_service",
        "description": "backend.ai.core.service.ai_service",
        "peekOfCode": "get_scholarship_field_tool = GetScholarshipFieldTool()\ndocument_retrieval_tool = DocumentRetrievalTool()\nclass CustomHandler(BaseCallbackHandler):\n    \"\"\"\n    Custom callback handler to track and process events during chat\n    \"\"\"\n    def __init__(self):\n        super().__init__()\ndef get_llm_and_agent() -> AgentExecutor:\n    system_message = \"\"\"You are a friendly and professional AI scholarship assistant of ScholarHub- an innovative platform a collaborative academic community ecosystem to comprehensively optimize the scholarship",
        "detail": "backend.ai.core.service.ai_service",
        "documentation": {}
    },
    {
        "label": "document_retrieval_tool",
        "kind": 5,
        "importPath": "backend.ai.core.service.ai_service",
        "description": "backend.ai.core.service.ai_service",
        "peekOfCode": "document_retrieval_tool = DocumentRetrievalTool()\nclass CustomHandler(BaseCallbackHandler):\n    \"\"\"\n    Custom callback handler to track and process events during chat\n    \"\"\"\n    def __init__(self):\n        super().__init__()\ndef get_llm_and_agent() -> AgentExecutor:\n    system_message = \"\"\"You are a friendly and professional AI scholarship assistant of ScholarHub- an innovative platform a collaborative academic community ecosystem to comprehensively optimize the scholarship\nsearch and application process for students worldwide . Your task is to help students find scholarships and provide information about scholarship concepts.",
        "detail": "backend.ai.core.service.ai_service",
        "documentation": {}
    },
    {
        "label": "ScholarshipSearchInput",
        "kind": 6,
        "importPath": "backend.ai.core.service.tools",
        "description": "backend.ai.core.service.tools",
        "peekOfCode": "class ScholarshipSearchInput(BaseModel):\n    query: str = Field(..., description=\"The search query for scholarships (can include keywords, country, degree level, etc.)\")\nclass ScholarshipSearchTool(BaseTool):\n    name: Annotated[str, Field(description=\"Tool name\")] = \"scholarship_search\"\n    description: Annotated[str, Field(description=\"Tool description\")] = \"Search for scholarships based on various criteria like country, degree level, major, etc.\"\n    args_schema: type[BaseModel] = ScholarshipSearchInput\n    def _run(self, query: str) -> List[Dict]:\n        return search_scholarships(query)\nclass GetScholarshipDetailsInput(BaseModel):\n    scholarship_id: int = Field(..., description=\"The ID of the scholarship to get details for\")",
        "detail": "backend.ai.core.service.tools",
        "documentation": {}
    },
    {
        "label": "ScholarshipSearchTool",
        "kind": 6,
        "importPath": "backend.ai.core.service.tools",
        "description": "backend.ai.core.service.tools",
        "peekOfCode": "class ScholarshipSearchTool(BaseTool):\n    name: Annotated[str, Field(description=\"Tool name\")] = \"scholarship_search\"\n    description: Annotated[str, Field(description=\"Tool description\")] = \"Search for scholarships based on various criteria like country, degree level, major, etc.\"\n    args_schema: type[BaseModel] = ScholarshipSearchInput\n    def _run(self, query: str) -> List[Dict]:\n        return search_scholarships(query)\nclass GetScholarshipDetailsInput(BaseModel):\n    scholarship_id: int = Field(..., description=\"The ID of the scholarship to get details for\")\nclass GetScholarshipDetailsTool(BaseTool):\n    name: Annotated[str, Field(description=\"Tool name\")] = \"get_scholarship_details\"",
        "detail": "backend.ai.core.service.tools",
        "documentation": {}
    },
    {
        "label": "GetScholarshipDetailsInput",
        "kind": 6,
        "importPath": "backend.ai.core.service.tools",
        "description": "backend.ai.core.service.tools",
        "peekOfCode": "class GetScholarshipDetailsInput(BaseModel):\n    scholarship_id: int = Field(..., description=\"The ID of the scholarship to get details for\")\nclass GetScholarshipDetailsTool(BaseTool):\n    name: Annotated[str, Field(description=\"Tool name\")] = \"get_scholarship_details\"\n    description: Annotated[str, Field(description=\"Tool description\")] = \"Get detailed information about a specific scholarship by ID\"\n    args_schema: type[BaseModel] = GetScholarshipDetailsInput\n    def _run(self, scholarship_id: int) -> Optional[Dict]:\n        return get_scholarship_by_id(scholarship_id)\nclass GetScholarshipFieldInput(BaseModel):\n    scholarship_id: int = Field(..., description=\"The ID of the scholarship\")",
        "detail": "backend.ai.core.service.tools",
        "documentation": {}
    },
    {
        "label": "GetScholarshipDetailsTool",
        "kind": 6,
        "importPath": "backend.ai.core.service.tools",
        "description": "backend.ai.core.service.tools",
        "peekOfCode": "class GetScholarshipDetailsTool(BaseTool):\n    name: Annotated[str, Field(description=\"Tool name\")] = \"get_scholarship_details\"\n    description: Annotated[str, Field(description=\"Tool description\")] = \"Get detailed information about a specific scholarship by ID\"\n    args_schema: type[BaseModel] = GetScholarshipDetailsInput\n    def _run(self, scholarship_id: int) -> Optional[Dict]:\n        return get_scholarship_by_id(scholarship_id)\nclass GetScholarshipFieldInput(BaseModel):\n    scholarship_id: int = Field(..., description=\"The ID of the scholarship\")\n    field_name: str = Field(..., description=\"The specific field to retrieve (e.g., 'deadline', 'original_url', 'description')\")\nclass GetScholarshipFieldTool(BaseTool):",
        "detail": "backend.ai.core.service.tools",
        "documentation": {}
    },
    {
        "label": "GetScholarshipFieldInput",
        "kind": 6,
        "importPath": "backend.ai.core.service.tools",
        "description": "backend.ai.core.service.tools",
        "peekOfCode": "class GetScholarshipFieldInput(BaseModel):\n    scholarship_id: int = Field(..., description=\"The ID of the scholarship\")\n    field_name: str = Field(..., description=\"The specific field to retrieve (e.g., 'deadline', 'original_url', 'description')\")\nclass GetScholarshipFieldTool(BaseTool):\n    name: Annotated[str, Field(description=\"Tool name\")] = \"get_scholarship_field\"\n    description: Annotated[str, Field(description=\"Tool description\")] = \"Get a specific field from a scholarship (like deadline or URL)\"\n    args_schema: type[BaseModel] = GetScholarshipFieldInput\n    def _run(self, scholarship_id: int, field_name: str) -> Optional[str]:\n        return get_scholarship_field(scholarship_id, field_name)\nclass DocumentRetrievalInput(BaseModel):",
        "detail": "backend.ai.core.service.tools",
        "documentation": {}
    },
    {
        "label": "GetScholarshipFieldTool",
        "kind": 6,
        "importPath": "backend.ai.core.service.tools",
        "description": "backend.ai.core.service.tools",
        "peekOfCode": "class GetScholarshipFieldTool(BaseTool):\n    name: Annotated[str, Field(description=\"Tool name\")] = \"get_scholarship_field\"\n    description: Annotated[str, Field(description=\"Tool description\")] = \"Get a specific field from a scholarship (like deadline or URL)\"\n    args_schema: type[BaseModel] = GetScholarshipFieldInput\n    def _run(self, scholarship_id: int, field_name: str) -> Optional[str]:\n        return get_scholarship_field(scholarship_id, field_name)\nclass DocumentRetrievalInput(BaseModel):\n    query: str = Field(..., description=\"The query about scholarship concepts, tips, or application advice\")\nclass DocumentRetrievalTool(BaseTool):\n    name: Annotated[str, Field(description=\"Tool name\")] = \"retrieve_documents\"",
        "detail": "backend.ai.core.service.tools",
        "documentation": {}
    },
    {
        "label": "DocumentRetrievalInput",
        "kind": 6,
        "importPath": "backend.ai.core.service.tools",
        "description": "backend.ai.core.service.tools",
        "peekOfCode": "class DocumentRetrievalInput(BaseModel):\n    query: str = Field(..., description=\"The query about scholarship concepts, tips, or application advice\")\nclass DocumentRetrievalTool(BaseTool):\n    name: Annotated[str, Field(description=\"Tool name\")] = \"retrieve_documents\"\n    description: Annotated[str, Field(description=\"Tool description\")] = \"Retrieve information from documents about scholarship concepts, tips, and application advice\"\n    args_schema: type[BaseModel] = DocumentRetrievalInput\n    def _run(self, query: str) -> List[Dict]:\n        return retrieve_documents(query)",
        "detail": "backend.ai.core.service.tools",
        "documentation": {}
    },
    {
        "label": "DocumentRetrievalTool",
        "kind": 6,
        "importPath": "backend.ai.core.service.tools",
        "description": "backend.ai.core.service.tools",
        "peekOfCode": "class DocumentRetrievalTool(BaseTool):\n    name: Annotated[str, Field(description=\"Tool name\")] = \"retrieve_documents\"\n    description: Annotated[str, Field(description=\"Tool description\")] = \"Retrieve information from documents about scholarship concepts, tips, and application advice\"\n    args_schema: type[BaseModel] = DocumentRetrievalInput\n    def _run(self, query: str) -> List[Dict]:\n        return retrieve_documents(query)",
        "detail": "backend.ai.core.service.tools",
        "documentation": {}
    },
    {
        "label": "llm",
        "kind": 5,
        "importPath": "backend.ai.core.LLMs",
        "description": "backend.ai.core.LLMs",
        "peekOfCode": "llm = ChatOpenAI(\n    model_name=\"gpt-4o\", \n    api_key=settings.OPENAPI_API_KEY,\n    temperature=0\n)\nopenai_embeddings = OpenAIEmbeddings(\n    api_key=settings.OPENAPI_API_KEY,\n)",
        "detail": "backend.ai.core.LLMs",
        "documentation": {}
    },
    {
        "label": "openai_embeddings",
        "kind": 5,
        "importPath": "backend.ai.core.LLMs",
        "description": "backend.ai.core.LLMs",
        "peekOfCode": "openai_embeddings = OpenAIEmbeddings(\n    api_key=settings.OPENAPI_API_KEY,\n)",
        "detail": "backend.ai.core.LLMs",
        "documentation": {}
    },
    {
        "label": "WebScrapeResponse",
        "kind": 6,
        "importPath": "backend.ai.core.Parsers",
        "description": "backend.ai.core.Parsers",
        "peekOfCode": "class WebScrapeResponse(BaseModel):\n    title: str\n    provider: str\n    type: str\n    funding_level: str\n    region: str\n    country: str\n    major: str\n    degree_level: str\n    education_criteria: str",
        "detail": "backend.ai.core.Parsers",
        "documentation": {}
    },
    {
        "label": "ResumeExtractResponse",
        "kind": 6,
        "importPath": "backend.ai.core.Parsers",
        "description": "backend.ai.core.Parsers",
        "peekOfCode": "class ResumeExtractResponse(BaseModel):\n    criteria: dict\nclass ScholarshipExtractResponse(BaseModel):\n    ordinal_criteria: dict\n    binary_criteria: dict\nclass ScholarshipSummaryResponse(BaseModel):\n    summary: str\nclass ScholarshipSelectResponse(BaseModel):\n    scholarship_ids: List[str]\nclass ProfileMatching(BaseModel):",
        "detail": "backend.ai.core.Parsers",
        "documentation": {}
    },
    {
        "label": "ScholarshipExtractResponse",
        "kind": 6,
        "importPath": "backend.ai.core.Parsers",
        "description": "backend.ai.core.Parsers",
        "peekOfCode": "class ScholarshipExtractResponse(BaseModel):\n    ordinal_criteria: dict\n    binary_criteria: dict\nclass ScholarshipSummaryResponse(BaseModel):\n    summary: str\nclass ScholarshipSelectResponse(BaseModel):\n    scholarship_ids: List[str]\nclass ProfileMatching(BaseModel):\n    ordinal_criteria: dict\n    binary_criteria: dict",
        "detail": "backend.ai.core.Parsers",
        "documentation": {}
    },
    {
        "label": "ScholarshipSummaryResponse",
        "kind": 6,
        "importPath": "backend.ai.core.Parsers",
        "description": "backend.ai.core.Parsers",
        "peekOfCode": "class ScholarshipSummaryResponse(BaseModel):\n    summary: str\nclass ScholarshipSelectResponse(BaseModel):\n    scholarship_ids: List[str]\nclass ProfileMatching(BaseModel):\n    ordinal_criteria: dict\n    binary_criteria: dict\nwebScrape_parser = PydanticOutputParser(pydantic_object=WebScrapeResponse)\nresumeExtract_parser = PydanticOutputParser(pydantic_object=ResumeExtractResponse)\nscholarshipExtract_parser = PydanticOutputParser(pydantic_object=ScholarshipExtractResponse)",
        "detail": "backend.ai.core.Parsers",
        "documentation": {}
    },
    {
        "label": "ScholarshipSelectResponse",
        "kind": 6,
        "importPath": "backend.ai.core.Parsers",
        "description": "backend.ai.core.Parsers",
        "peekOfCode": "class ScholarshipSelectResponse(BaseModel):\n    scholarship_ids: List[str]\nclass ProfileMatching(BaseModel):\n    ordinal_criteria: dict\n    binary_criteria: dict\nwebScrape_parser = PydanticOutputParser(pydantic_object=WebScrapeResponse)\nresumeExtract_parser = PydanticOutputParser(pydantic_object=ResumeExtractResponse)\nscholarshipExtract_parser = PydanticOutputParser(pydantic_object=ScholarshipExtractResponse)\nscholarshipSummary_parser = PydanticOutputParser(pydantic_object=ScholarshipSummaryResponse)\nscholarshipSelect_parser = PydanticOutputParser(pydantic_object=ScholarshipSelectResponse)",
        "detail": "backend.ai.core.Parsers",
        "documentation": {}
    },
    {
        "label": "ProfileMatching",
        "kind": 6,
        "importPath": "backend.ai.core.Parsers",
        "description": "backend.ai.core.Parsers",
        "peekOfCode": "class ProfileMatching(BaseModel):\n    ordinal_criteria: dict\n    binary_criteria: dict\nwebScrape_parser = PydanticOutputParser(pydantic_object=WebScrapeResponse)\nresumeExtract_parser = PydanticOutputParser(pydantic_object=ResumeExtractResponse)\nscholarshipExtract_parser = PydanticOutputParser(pydantic_object=ScholarshipExtractResponse)\nscholarshipSummary_parser = PydanticOutputParser(pydantic_object=ScholarshipSummaryResponse)\nscholarshipSelect_parser = PydanticOutputParser(pydantic_object=ScholarshipSelectResponse)\nprofileMatching_parser = PydanticOutputParser(pydantic_object=ProfileMatching)",
        "detail": "backend.ai.core.Parsers",
        "documentation": {}
    },
    {
        "label": "webScrape_parser",
        "kind": 5,
        "importPath": "backend.ai.core.Parsers",
        "description": "backend.ai.core.Parsers",
        "peekOfCode": "webScrape_parser = PydanticOutputParser(pydantic_object=WebScrapeResponse)\nresumeExtract_parser = PydanticOutputParser(pydantic_object=ResumeExtractResponse)\nscholarshipExtract_parser = PydanticOutputParser(pydantic_object=ScholarshipExtractResponse)\nscholarshipSummary_parser = PydanticOutputParser(pydantic_object=ScholarshipSummaryResponse)\nscholarshipSelect_parser = PydanticOutputParser(pydantic_object=ScholarshipSelectResponse)\nprofileMatching_parser = PydanticOutputParser(pydantic_object=ProfileMatching)",
        "detail": "backend.ai.core.Parsers",
        "documentation": {}
    },
    {
        "label": "resumeExtract_parser",
        "kind": 5,
        "importPath": "backend.ai.core.Parsers",
        "description": "backend.ai.core.Parsers",
        "peekOfCode": "resumeExtract_parser = PydanticOutputParser(pydantic_object=ResumeExtractResponse)\nscholarshipExtract_parser = PydanticOutputParser(pydantic_object=ScholarshipExtractResponse)\nscholarshipSummary_parser = PydanticOutputParser(pydantic_object=ScholarshipSummaryResponse)\nscholarshipSelect_parser = PydanticOutputParser(pydantic_object=ScholarshipSelectResponse)\nprofileMatching_parser = PydanticOutputParser(pydantic_object=ProfileMatching)",
        "detail": "backend.ai.core.Parsers",
        "documentation": {}
    },
    {
        "label": "scholarshipExtract_parser",
        "kind": 5,
        "importPath": "backend.ai.core.Parsers",
        "description": "backend.ai.core.Parsers",
        "peekOfCode": "scholarshipExtract_parser = PydanticOutputParser(pydantic_object=ScholarshipExtractResponse)\nscholarshipSummary_parser = PydanticOutputParser(pydantic_object=ScholarshipSummaryResponse)\nscholarshipSelect_parser = PydanticOutputParser(pydantic_object=ScholarshipSelectResponse)\nprofileMatching_parser = PydanticOutputParser(pydantic_object=ProfileMatching)",
        "detail": "backend.ai.core.Parsers",
        "documentation": {}
    },
    {
        "label": "scholarshipSummary_parser",
        "kind": 5,
        "importPath": "backend.ai.core.Parsers",
        "description": "backend.ai.core.Parsers",
        "peekOfCode": "scholarshipSummary_parser = PydanticOutputParser(pydantic_object=ScholarshipSummaryResponse)\nscholarshipSelect_parser = PydanticOutputParser(pydantic_object=ScholarshipSelectResponse)\nprofileMatching_parser = PydanticOutputParser(pydantic_object=ProfileMatching)",
        "detail": "backend.ai.core.Parsers",
        "documentation": {}
    },
    {
        "label": "scholarshipSelect_parser",
        "kind": 5,
        "importPath": "backend.ai.core.Parsers",
        "description": "backend.ai.core.Parsers",
        "peekOfCode": "scholarshipSelect_parser = PydanticOutputParser(pydantic_object=ScholarshipSelectResponse)\nprofileMatching_parser = PydanticOutputParser(pydantic_object=ProfileMatching)",
        "detail": "backend.ai.core.Parsers",
        "documentation": {}
    },
    {
        "label": "profileMatching_parser",
        "kind": 5,
        "importPath": "backend.ai.core.Parsers",
        "description": "backend.ai.core.Parsers",
        "peekOfCode": "profileMatching_parser = PydanticOutputParser(pydantic_object=ProfileMatching)",
        "detail": "backend.ai.core.Parsers",
        "documentation": {}
    },
    {
        "label": "profileMatching_prompt",
        "kind": 5,
        "importPath": "backend.ai.core.Prompts",
        "description": "backend.ai.core.Prompts",
        "peekOfCode": "profileMatching_prompt = \"\"\"\nYou are an intelligent virtual assistant specialized in evaluating student profiles against scholarship descriptions. You will be given a scholarship description and a student profile. Your task is to assess the student's qualifications **independently for each scholarship criterion** and provide suggestions or tips for improvement.\nInstructions:\n- Evaluate **each criterion separately and independently**. Do not let performance in one criterion influence the score of another.\n- Use the evaluation tables provided below to assign a profile score (criteria profile point) and a scholarship score (criteria scholarship point) for each criterion.\n- Consider:\n  - If the scholarship description lacks a criterion, assign the scholarship point as 5 (i.e., assume the scholarship is open to all levels for that criterion).\n  - If the student profile lacks a criterion, assign the profile point as 0.\n- The match percentage is calculated as: (criteria profile point / criteria scholarship point) * 100\n- Return only a valid JSON object with double quotes around all keys and values.",
        "detail": "backend.ai.core.Prompts",
        "documentation": {}
    },
    {
        "label": "scholarshipSelect_prompt",
        "kind": 5,
        "importPath": "backend.ai.core.Prompts",
        "description": "backend.ai.core.Prompts",
        "peekOfCode": "scholarshipSelect_prompt = \"\"\"\nYou are an intelligent virtual assistant specialized in selecting scholarships that maybe match the user's requirements. Your task is to choose all relevant scholarship IDs from the provided list of scholarships based on the user's search query.\nIMPORTANT:\n- Only select scholarships from the **provided list**. Do not infer or create new scholarships that are not in the list.\nProvided list of scholarships:\n{scholarships}\nUser's search query:\n{question}\nReturn the result in **JSON format** following the specified schema:\nscholarship_ids: List[str] = Field(..., description=\"List of selected scholarship IDs\")",
        "detail": "backend.ai.core.Prompts",
        "documentation": {}
    },
    {
        "label": "scholarshipSummary_prompt",
        "kind": 5,
        "importPath": "backend.ai.core.Prompts",
        "description": "backend.ai.core.Prompts",
        "peekOfCode": "scholarshipSummary_prompt = \"\"\"\nYou are an intelligent virtual assistant specialized in summarizing scholarship descriptions. You will be provided with a full scholarship description, and your task is to summarize it into a more concise version without omitting any important information.\nReturn Format:\n```json\n{{\n  \"summary\": your description summary. \n}}\n```\nImportant information of a scholarship includes:\n- Scholarship title and type (e.g., full/partial, merit-based, need-based)",
        "detail": "backend.ai.core.Prompts",
        "documentation": {}
    },
    {
        "label": "scholarshipExtract_prompt",
        "kind": 5,
        "importPath": "backend.ai.core.Prompts",
        "description": "backend.ai.core.Prompts",
        "peekOfCode": "scholarshipExtract_prompt = \"\"\"\nYou are an intelligent virtual assistant specialized in comparing a scholarship description against certain criteria. You will be provided with a set of criteria, and your task is to extract requirements from the scholarship description based on these criteria. If the description meets a criterion, the relevant score will be 1; otherwise, it will be 0. Finally, you will return the evaluation in the JSON format defined below:\nReturn Format:\n- All ordinal_criteria must be return as a numpy array of 0 and 1 in shape of (5,).\n- Follow strictly this json rule and always return as a valid python dictionary\n- All property name are enclosed in double quotes and do not forget any delimeters.\n```json\n{{\n  \"ordinal_criteria\": {{\n    \"education\": {{",
        "detail": "backend.ai.core.Prompts",
        "documentation": {}
    },
    {
        "label": "resumeExtract_prompt",
        "kind": 5,
        "importPath": "backend.ai.core.Prompts",
        "description": "backend.ai.core.Prompts",
        "peekOfCode": "resumeExtract_prompt = \"\"\"\nYou are an intelligent virtual assistant specialized in comparing a CV against job requirements.\nYou will be provided with a resume. All ordinal_criteria must be return as a numpy array of 0 and 1 in shape of (5,). If the resume is **empty or not provided**, just return all criteria as a numpy array of 0 in shape of (5,).\nReturn format: \n```json\n    criteria: {{\n      \"education\": {{\n          score: [score_1, score_2, score_3, score_4, score_5],\n          evidence: [\"evidence 1\", evidence 2\"]\n      }},",
        "detail": "backend.ai.core.Prompts",
        "documentation": {}
    },
    {
        "label": "webScrape_prompt",
        "kind": 5,
        "importPath": "backend.ai.core.Prompts",
        "description": "backend.ai.core.Prompts",
        "peekOfCode": "webScrape_prompt = \"\"\"You are an intelligent virtual assistant specialized in extracting information from provided texts. Your task is to extract specific information fields from a passage of text that we supply.\n**Detailed Instructions**:\n1. Analyze the provided passage.\n2. Search for relevant information.\n3. Construct your response:\n    - Make sure to only use information that is explicitly provided. Do not fabricate or infer anything that is not clearly stated.\n    - If the information is not found in the provided passage, please return \"Please refer to the original url for more details.\"\n4. Define the output:\n    - Return the result in the following JSON format:\n    ```json",
        "detail": "backend.ai.core.Prompts",
        "documentation": {}
    },
    {
        "label": "get_chat_completion",
        "kind": 2,
        "importPath": "backend.ai.core.chain",
        "description": "backend.ai.core.chain",
        "peekOfCode": "def get_chat_completion(task: str, params={}):\n    prompt, parser = get_prompt_template(task)\n    chain = prompt | llm | parser\n    response = chain.invoke(params).dict()\n    return response\ndef get_prompt_template(task):\n    if task == \"web_scrape\":\n        parser = webScrape_parser\n        prompt_template = webScrape_prompt\n    elif task == \"resume_extract\":",
        "detail": "backend.ai.core.chain",
        "documentation": {}
    },
    {
        "label": "get_prompt_template",
        "kind": 2,
        "importPath": "backend.ai.core.chain",
        "description": "backend.ai.core.chain",
        "peekOfCode": "def get_prompt_template(task):\n    if task == \"web_scrape\":\n        parser = webScrape_parser\n        prompt_template = webScrape_prompt\n    elif task == \"resume_extract\":\n        parser = resumeExtract_parser\n        prompt_template = resumeExtract_prompt\n    elif task == \"scholarship_extract\":\n        parser = scholarshipExtract_parser\n        prompt_template = scholarshipExtract_prompt",
        "detail": "backend.ai.core.chain",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.Auth.auth",
        "description": "backend.api.v1.Auth.auth",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/register\")\nasync def register(\n    user_data: UserCreate, \n    db: Session = Depends(get_db)\n) -> Any:\n    \"\"\"Đăng ký người dùng mới\"\"\"\n    try:\n        success, user = User.create_user(db, user_data)       \n        if not success:",
        "detail": "backend.api.v1.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_scholarship",
        "kind": 2,
        "importPath": "backend.api.v1.CRUD.Scholarship",
        "description": "backend.api.v1.CRUD.Scholarship",
        "peekOfCode": "def get_scholarship(\n    db = Depends(get_db),\n    user = Depends(get_current_user),\n    suggest: bool = False,\n    id: Optional[str] = None,\n    limit: int = 10,\n    offset: int = 0\n):\n    # try:\n        if not suggest:",
        "detail": "backend.api.v1.CRUD.Scholarship",
        "documentation": {}
    },
    {
        "label": "get_scholarship",
        "kind": 2,
        "importPath": "backend.api.v1.CRUD.Scholarship",
        "description": "backend.api.v1.CRUD.Scholarship",
        "peekOfCode": "def get_scholarship(\n    db = Depends(get_db),\n    user = Depends(get_current_user),\n    limit: int = 10,\n    offset: int = 0\n):\n    try:\n        payload = Scholarship.get(\n            db = db, \n            mode = \"filter\",",
        "detail": "backend.api.v1.CRUD.Scholarship",
        "documentation": {}
    },
    {
        "label": "post_scholarship",
        "kind": 2,
        "importPath": "backend.api.v1.CRUD.Scholarship",
        "description": "backend.api.v1.CRUD.Scholarship",
        "peekOfCode": "def post_scholarship(\n    payload: PostScholarshipRequest, \n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    posted_at = datetime.now()\n    data = payload.model_dump()\n    weights = cal_weights(data[\"weights\"])\n    data.pop(\"weights\")\n    for key in weights.keys():",
        "detail": "backend.api.v1.CRUD.Scholarship",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.CRUD.Scholarship",
        "description": "backend.api.v1.CRUD.Scholarship",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/scholarships\")\ndef get_scholarship(\n    db = Depends(get_db),\n    user = Depends(get_current_user),\n    suggest: bool = False,\n    id: Optional[str] = None,\n    limit: int = 10,\n    offset: int = 0\n):",
        "detail": "backend.api.v1.CRUD.Scholarship",
        "documentation": {}
    },
    {
        "label": "get_connection_suggestions",
        "kind": 2,
        "importPath": "backend.api.v1.Community.Connections",
        "description": "backend.api.v1.Community.Connections",
        "peekOfCode": "def get_connection_suggestions(\n    db: Session = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    \"\"\"Lấy gợi ý kết nối - tạm thời trả về random users\"\"\"\n    try:\n        # Lấy một số users khác (không phải current user)\n        suggested_users = db.query(User).filter(User.id != user.id).limit(10).all()\n        suggestions = []\n        for suggested_user in suggested_users:",
        "detail": "backend.api.v1.Community.Connections",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.Community.Connections",
        "description": "backend.api.v1.Community.Connections",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/connections\")\ndef get_connection_suggestions(\n    db: Session = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    \"\"\"Lấy gợi ý kết nối - tạm thời trả về random users\"\"\"\n    try:\n        # Lấy một số users khác (không phải current user)\n        suggested_users = db.query(User).filter(User.id != user.id).limit(10).all()",
        "detail": "backend.api.v1.Community.Connections",
        "documentation": {}
    },
    {
        "label": "get_posts",
        "kind": 2,
        "importPath": "backend.api.v1.Community.Posts",
        "description": "backend.api.v1.Community.Posts",
        "peekOfCode": "def get_posts(\n    page: int = Query(1, ge=1),\n    limit: int = Query(20, ge=1, le=100),\n    db: Session = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    \"\"\"Lấy danh sách posts với pagination\"\"\"\n    try:\n        offset = (page - 1) * limit\n        # Query posts với author info và profile",
        "detail": "backend.api.v1.Community.Posts",
        "documentation": {}
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "backend.api.v1.Community.Posts",
        "description": "backend.api.v1.Community.Posts",
        "peekOfCode": "def create_post(\n    payload: PostCreateRequest,\n    db: Session = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    \"\"\"Tạo post mới\"\"\"\n    try:\n        new_post = CommunityPost(\n            author_id=user.id,\n            content=payload.content,",
        "detail": "backend.api.v1.Community.Posts",
        "documentation": {}
    },
    {
        "label": "toggle_reaction",
        "kind": 2,
        "importPath": "backend.api.v1.Community.Posts",
        "description": "backend.api.v1.Community.Posts",
        "peekOfCode": "def toggle_reaction(\n    post_id: str,\n    payload: ReactionRequest,\n    db: Session = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    \"\"\"Toggle reaction (like/unlike)\"\"\"\n    try:\n        # Check if post exists\n        post = db.query(CommunityPost).filter(CommunityPost.id == post_id).first()",
        "detail": "backend.api.v1.Community.Posts",
        "documentation": {}
    },
    {
        "label": "toggle_comment_reaction",
        "kind": 2,
        "importPath": "backend.api.v1.Community.Posts",
        "description": "backend.api.v1.Community.Posts",
        "peekOfCode": "def toggle_comment_reaction(\n    post_id: str,\n    comment_id: str,\n    payload: ReactionRequest,\n    db: Session = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    \"\"\"Toggle comment reaction (like/unlike)\"\"\"\n    try:\n        # Check if comment exists",
        "detail": "backend.api.v1.Community.Posts",
        "documentation": {}
    },
    {
        "label": "get_comments",
        "kind": 2,
        "importPath": "backend.api.v1.Community.Posts",
        "description": "backend.api.v1.Community.Posts",
        "peekOfCode": "def get_comments(\n    post_id: str,\n    db: Session = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    \"\"\"Lấy comments của post\"\"\"\n    try:\n        comments = db.query(CommunityComment).join(User).filter(\n            CommunityComment.post_id == post_id\n        ).order_by(CommunityComment.created_at.asc()).all()",
        "detail": "backend.api.v1.Community.Posts",
        "documentation": {}
    },
    {
        "label": "create_comment",
        "kind": 2,
        "importPath": "backend.api.v1.Community.Posts",
        "description": "backend.api.v1.Community.Posts",
        "peekOfCode": "def create_comment(\n    post_id: str,\n    payload: CommentCreateRequest,\n    db: Session = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    \"\"\"Tạo comment mới\"\"\"\n    try:\n        # Check if post exists\n        post = db.query(CommunityPost).filter(CommunityPost.id == post_id).first()",
        "detail": "backend.api.v1.Community.Posts",
        "documentation": {}
    },
    {
        "label": "create_repost",
        "kind": 2,
        "importPath": "backend.api.v1.Community.Posts",
        "description": "backend.api.v1.Community.Posts",
        "peekOfCode": "def create_repost(\n    post_id: str,\n    db: Session = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    \"\"\"Tạo repost - tạo post mới từ post gốc\"\"\"\n    try:\n        # Check if post exists\n        original_post = db.query(CommunityPost).filter(CommunityPost.id == post_id).first()\n        if not original_post:",
        "detail": "backend.api.v1.Community.Posts",
        "documentation": {}
    },
    {
        "label": "toggle_save_post",
        "kind": 2,
        "importPath": "backend.api.v1.Community.Posts",
        "description": "backend.api.v1.Community.Posts",
        "peekOfCode": "def toggle_save_post(\n    post_id: str,\n    db: Session = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    \"\"\"Toggle save post (save/unsave)\"\"\"\n    try:\n        # Check if post exists\n        post = db.query(CommunityPost).filter(CommunityPost.id == post_id).first()\n        if not post:",
        "detail": "backend.api.v1.Community.Posts",
        "documentation": {}
    },
    {
        "label": "get_saved_posts",
        "kind": 2,
        "importPath": "backend.api.v1.Community.Posts",
        "description": "backend.api.v1.Community.Posts",
        "peekOfCode": "def get_saved_posts(\n    page: int = Query(1, ge=1),\n    limit: int = Query(20, ge=1, le=100),\n    db: Session = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    \"\"\"Lấy danh sách saved posts của user\"\"\"\n    try:\n        offset = (page - 1) * limit\n        # Query saved posts của user",
        "detail": "backend.api.v1.Community.Posts",
        "documentation": {}
    },
    {
        "label": "get_saved_posts_count",
        "kind": 2,
        "importPath": "backend.api.v1.Community.Posts",
        "description": "backend.api.v1.Community.Posts",
        "peekOfCode": "def get_saved_posts_count(\n    db: Session = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    \"\"\"Lấy số lượng saved posts của user\"\"\"\n    try:\n        count = db.query(SavedPost).filter(SavedPost.user_id == user.id).count()\n        return JSONResponse(\n            status_code=status.HTTP_200_OK,\n            content={",
        "detail": "backend.api.v1.Community.Posts",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.Community.Posts",
        "description": "backend.api.v1.Community.Posts",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/posts\")\ndef get_posts(\n    page: int = Query(1, ge=1),\n    limit: int = Query(20, ge=1, le=100),\n    db: Session = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    \"\"\"Lấy danh sách posts với pagination\"\"\"\n    try:",
        "detail": "backend.api.v1.Community.Posts",
        "documentation": {}
    },
    {
        "label": "get_file_category",
        "kind": 2,
        "importPath": "backend.api.v1.Community.Upload",
        "description": "backend.api.v1.Community.Upload",
        "peekOfCode": "def get_file_category(content_type: str) -> str:\n    \"\"\"Determine file category based on content type\"\"\"\n    if content_type in ALLOWED_IMAGE_TYPES:\n        return \"image\"\n    elif content_type in ALLOWED_VIDEO_TYPES:\n        return \"video\"\n    elif content_type in ALLOWED_FILE_TYPES:\n        return \"file\"\n    else:\n        return \"unknown\"",
        "detail": "backend.api.v1.Community.Upload",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.Community.Upload",
        "description": "backend.api.v1.Community.Upload",
        "peekOfCode": "router = APIRouter()\n# Allowed file types\nALLOWED_IMAGE_TYPES = {\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}\nALLOWED_VIDEO_TYPES = {\"video/mp4\", \"video/webm\", \"video/mov\", \"video/avi\"}\nALLOWED_FILE_TYPES = {\"application/pdf\", \"text/plain\", \"application/msword\", \n                     \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"}\n# Max file sizes (bytes)\nMAX_IMAGE_SIZE = 10 * 1024 * 1024  # 10MB\nMAX_VIDEO_SIZE = 100 * 1024 * 1024  # 100MB  \nMAX_FILE_SIZE = 25 * 1024 * 1024   # 25MB",
        "detail": "backend.api.v1.Community.Upload",
        "documentation": {}
    },
    {
        "label": "ALLOWED_IMAGE_TYPES",
        "kind": 5,
        "importPath": "backend.api.v1.Community.Upload",
        "description": "backend.api.v1.Community.Upload",
        "peekOfCode": "ALLOWED_IMAGE_TYPES = {\"image/jpeg\", \"image/png\", \"image/gif\", \"image/webp\"}\nALLOWED_VIDEO_TYPES = {\"video/mp4\", \"video/webm\", \"video/mov\", \"video/avi\"}\nALLOWED_FILE_TYPES = {\"application/pdf\", \"text/plain\", \"application/msword\", \n                     \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"}\n# Max file sizes (bytes)\nMAX_IMAGE_SIZE = 10 * 1024 * 1024  # 10MB\nMAX_VIDEO_SIZE = 100 * 1024 * 1024  # 100MB  \nMAX_FILE_SIZE = 25 * 1024 * 1024   # 25MB\ndef get_file_category(content_type: str) -> str:\n    \"\"\"Determine file category based on content type\"\"\"",
        "detail": "backend.api.v1.Community.Upload",
        "documentation": {}
    },
    {
        "label": "ALLOWED_VIDEO_TYPES",
        "kind": 5,
        "importPath": "backend.api.v1.Community.Upload",
        "description": "backend.api.v1.Community.Upload",
        "peekOfCode": "ALLOWED_VIDEO_TYPES = {\"video/mp4\", \"video/webm\", \"video/mov\", \"video/avi\"}\nALLOWED_FILE_TYPES = {\"application/pdf\", \"text/plain\", \"application/msword\", \n                     \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"}\n# Max file sizes (bytes)\nMAX_IMAGE_SIZE = 10 * 1024 * 1024  # 10MB\nMAX_VIDEO_SIZE = 100 * 1024 * 1024  # 100MB  \nMAX_FILE_SIZE = 25 * 1024 * 1024   # 25MB\ndef get_file_category(content_type: str) -> str:\n    \"\"\"Determine file category based on content type\"\"\"\n    if content_type in ALLOWED_IMAGE_TYPES:",
        "detail": "backend.api.v1.Community.Upload",
        "documentation": {}
    },
    {
        "label": "ALLOWED_FILE_TYPES",
        "kind": 5,
        "importPath": "backend.api.v1.Community.Upload",
        "description": "backend.api.v1.Community.Upload",
        "peekOfCode": "ALLOWED_FILE_TYPES = {\"application/pdf\", \"text/plain\", \"application/msword\", \n                     \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"}\n# Max file sizes (bytes)\nMAX_IMAGE_SIZE = 10 * 1024 * 1024  # 10MB\nMAX_VIDEO_SIZE = 100 * 1024 * 1024  # 100MB  \nMAX_FILE_SIZE = 25 * 1024 * 1024   # 25MB\ndef get_file_category(content_type: str) -> str:\n    \"\"\"Determine file category based on content type\"\"\"\n    if content_type in ALLOWED_IMAGE_TYPES:\n        return \"image\"",
        "detail": "backend.api.v1.Community.Upload",
        "documentation": {}
    },
    {
        "label": "MAX_IMAGE_SIZE",
        "kind": 5,
        "importPath": "backend.api.v1.Community.Upload",
        "description": "backend.api.v1.Community.Upload",
        "peekOfCode": "MAX_IMAGE_SIZE = 10 * 1024 * 1024  # 10MB\nMAX_VIDEO_SIZE = 100 * 1024 * 1024  # 100MB  \nMAX_FILE_SIZE = 25 * 1024 * 1024   # 25MB\ndef get_file_category(content_type: str) -> str:\n    \"\"\"Determine file category based on content type\"\"\"\n    if content_type in ALLOWED_IMAGE_TYPES:\n        return \"image\"\n    elif content_type in ALLOWED_VIDEO_TYPES:\n        return \"video\"\n    elif content_type in ALLOWED_FILE_TYPES:",
        "detail": "backend.api.v1.Community.Upload",
        "documentation": {}
    },
    {
        "label": "MAX_VIDEO_SIZE",
        "kind": 5,
        "importPath": "backend.api.v1.Community.Upload",
        "description": "backend.api.v1.Community.Upload",
        "peekOfCode": "MAX_VIDEO_SIZE = 100 * 1024 * 1024  # 100MB  \nMAX_FILE_SIZE = 25 * 1024 * 1024   # 25MB\ndef get_file_category(content_type: str) -> str:\n    \"\"\"Determine file category based on content type\"\"\"\n    if content_type in ALLOWED_IMAGE_TYPES:\n        return \"image\"\n    elif content_type in ALLOWED_VIDEO_TYPES:\n        return \"video\"\n    elif content_type in ALLOWED_FILE_TYPES:\n        return \"file\"",
        "detail": "backend.api.v1.Community.Upload",
        "documentation": {}
    },
    {
        "label": "MAX_FILE_SIZE",
        "kind": 5,
        "importPath": "backend.api.v1.Community.Upload",
        "description": "backend.api.v1.Community.Upload",
        "peekOfCode": "MAX_FILE_SIZE = 25 * 1024 * 1024   # 25MB\ndef get_file_category(content_type: str) -> str:\n    \"\"\"Determine file category based on content type\"\"\"\n    if content_type in ALLOWED_IMAGE_TYPES:\n        return \"image\"\n    elif content_type in ALLOWED_VIDEO_TYPES:\n        return \"video\"\n    elif content_type in ALLOWED_FILE_TYPES:\n        return \"file\"\n    else:",
        "detail": "backend.api.v1.Community.Upload",
        "documentation": {}
    },
    {
        "label": "delete_achievement",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Achievement",
        "description": "backend.api.v1.Profile.Achievement",
        "peekOfCode": "def delete_achievement(\n    payload: AchievementDeleteRequest,\n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    try:\n        Achievement.delete(db, user,payload)\n    except Exception as err:\n        print(err)\n        return JSONResponse(",
        "detail": "backend.api.v1.Profile.Achievement",
        "documentation": {}
    },
    {
        "label": "update_achievement",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Achievement",
        "description": "backend.api.v1.Profile.Achievement",
        "peekOfCode": "def update_achievement(\n    payload: AchievementUpdateRequest,\n    db = Depends(get_db),\n    user = Depends(get_current_user),\n):\n    try:\n        achievement = Achievement.update(\n            db = db,\n            user = user,\n            achievement = payload",
        "detail": "backend.api.v1.Profile.Achievement",
        "documentation": {}
    },
    {
        "label": "get_achievement",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Achievement",
        "description": "backend.api.v1.Profile.Achievement",
        "peekOfCode": "def get_achievement(\n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    try:\n        achievement = Achievement.get(\n            db = db,\n            user = user,\n            params = {}\n        )",
        "detail": "backend.api.v1.Profile.Achievement",
        "documentation": {}
    },
    {
        "label": "create_achievement",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Achievement",
        "description": "backend.api.v1.Profile.Achievement",
        "peekOfCode": "def create_achievement(\n    payload: AchievementCreateRequest,\n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    try:\n        achievement = Achievement.create(\n            db = db,\n            user = user,\n            achievement = payload",
        "detail": "backend.api.v1.Profile.Achievement",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.Profile.Achievement",
        "description": "backend.api.v1.Profile.Achievement",
        "peekOfCode": "router = APIRouter()\n@router.delete(\"/achievement\")\ndef delete_achievement(\n    payload: AchievementDeleteRequest,\n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    try:\n        Achievement.delete(db, user,payload)\n    except Exception as err:",
        "detail": "backend.api.v1.Profile.Achievement",
        "documentation": {}
    },
    {
        "label": "delete_certification",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Certification",
        "description": "backend.api.v1.Profile.Certification",
        "peekOfCode": "def delete_certification(\n    payload: CertificationDeleteRequest,\n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    try:\n        Certification.delete(db, user, payload)\n    except Exception as err:\n        print(err)\n        return JSONResponse(",
        "detail": "backend.api.v1.Profile.Certification",
        "documentation": {}
    },
    {
        "label": "update_certification",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Certification",
        "description": "backend.api.v1.Profile.Certification",
        "peekOfCode": "def update_certification(\n    payload: CertificationUpdateRequest,\n    db = Depends(get_db),\n    user = Depends(get_current_user),\n):\n    try:\n        certification = Certification.update(\n            db=db,\n            user=user,\n            certification=payload",
        "detail": "backend.api.v1.Profile.Certification",
        "documentation": {}
    },
    {
        "label": "get_certification",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Certification",
        "description": "backend.api.v1.Profile.Certification",
        "peekOfCode": "def get_certification(\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    try:\n        certification = Certification.get(\n            db=db,\n            user=user,\n            params={}\n        )",
        "detail": "backend.api.v1.Profile.Certification",
        "documentation": {}
    },
    {
        "label": "create_certification",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Certification",
        "description": "backend.api.v1.Profile.Certification",
        "peekOfCode": "def create_certification(\n    payload: CertificationCreateRequest,\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    try:\n        certification = Certification.create(\n            db=db,\n            user=user,\n            certification=payload",
        "detail": "backend.api.v1.Profile.Certification",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.Profile.Certification",
        "description": "backend.api.v1.Profile.Certification",
        "peekOfCode": "router = APIRouter()\n@router.delete(\"/certification\")\ndef delete_certification(\n    payload: CertificationDeleteRequest,\n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    try:\n        Certification.delete(db, user, payload)\n    except Exception as err:",
        "detail": "backend.api.v1.Profile.Certification",
        "documentation": {}
    },
    {
        "label": "delete_education",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Education",
        "description": "backend.api.v1.Profile.Education",
        "peekOfCode": "def delete_education(\n    payload: EducationDeleteRequest,\n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    success= Education.delete(\n        db = db,\n        user = user,\n        education = payload\n    )",
        "detail": "backend.api.v1.Profile.Education",
        "documentation": {}
    },
    {
        "label": "update_education",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Education",
        "description": "backend.api.v1.Profile.Education",
        "peekOfCode": "def update_education(\n    payload: EducationUpdateRequest,\n    db = Depends(get_db),\n    user = Depends(get_current_user),\n):\n    success, education = Education.update(\n        db = db,\n        user = user,\n        education = payload\n    )",
        "detail": "backend.api.v1.Profile.Education",
        "documentation": {}
    },
    {
        "label": "get_education",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Education",
        "description": "backend.api.v1.Profile.Education",
        "peekOfCode": "def get_education(\n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    try:\n        education = Education.get(\n            db = db,\n            user = user,\n            params = {}\n        )",
        "detail": "backend.api.v1.Profile.Education",
        "documentation": {}
    },
    {
        "label": "create_education",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Education",
        "description": "backend.api.v1.Profile.Education",
        "peekOfCode": "def create_education(\n    payload: EducationCreateRequest,\n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    try:\n        education = Education.create(\n            db = db,\n            user = user,\n            education = payload",
        "detail": "backend.api.v1.Profile.Education",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.Profile.Education",
        "description": "backend.api.v1.Profile.Education",
        "peekOfCode": "router = APIRouter()\n@router.delete(\"/education\")\ndef delete_education(\n    payload: EducationDeleteRequest,\n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    success= Education.delete(\n        db = db,\n        user = user,",
        "detail": "backend.api.v1.Profile.Education",
        "documentation": {}
    },
    {
        "label": "delete_experience",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Experience",
        "description": "backend.api.v1.Profile.Experience",
        "peekOfCode": "def delete_experience(\n    payload: ExperienceDeleteRequest,\n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    success= Experience.delete(\n        db = db,\n        user = user,\n        experience = payload\n    )",
        "detail": "backend.api.v1.Profile.Experience",
        "documentation": {}
    },
    {
        "label": "update_experience",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Experience",
        "description": "backend.api.v1.Profile.Experience",
        "peekOfCode": "def update_experience(\n    payload: ExperienceUpdateRequest,\n    db = Depends(get_db),\n    user = Depends(get_current_user),\n):\n    try:\n        experience = Experience.update(\n            db = db,\n            user = user,\n            experience = payload",
        "detail": "backend.api.v1.Profile.Experience",
        "documentation": {}
    },
    {
        "label": "get_experience",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Experience",
        "description": "backend.api.v1.Profile.Experience",
        "peekOfCode": "def get_experience(\n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    experience = Experience.get(\n        db = db,\n        user = user,\n        params = {}\n    )\n    return JSONResponse(",
        "detail": "backend.api.v1.Profile.Experience",
        "documentation": {}
    },
    {
        "label": "create_experience",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Experience",
        "description": "backend.api.v1.Profile.Experience",
        "peekOfCode": "def create_experience(\n    payload: ExperienceCreateRequest,\n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    experience = Experience.create(\n        db = db,\n        user = user,\n        experience = payload\n    )",
        "detail": "backend.api.v1.Profile.Experience",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.Profile.Experience",
        "description": "backend.api.v1.Profile.Experience",
        "peekOfCode": "router = APIRouter()\n@router.delete(\"/experience\")\ndef delete_experience(\n    payload: ExperienceDeleteRequest,\n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    success= Experience.delete(\n        db = db,\n        user = user,",
        "detail": "backend.api.v1.Profile.Experience",
        "documentation": {}
    },
    {
        "label": "create_personal",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Personal",
        "description": "backend.api.v1.Profile.Personal",
        "peekOfCode": "def create_personal(\n    payload: PersonalCreateRequest,  # Đổi schema\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):  \n    print(payload.model_dump())\n    try:\n        result = Profile.create(db=db, user=user, profile=payload)\n        return JSONResponse(\n            status_code=status.HTTP_200_OK,",
        "detail": "backend.api.v1.Profile.Personal",
        "documentation": {}
    },
    {
        "label": "get_personal",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Personal",
        "description": "backend.api.v1.Profile.Personal",
        "peekOfCode": "def get_personal(\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    result = Profile.get(db=db, user=user)\n    return JSONResponse(\n        status_code=status.HTTP_200_OK,\n        content={\n            \"success\": True,\n            \"message\": \"Lấy personal thành công\",",
        "detail": "backend.api.v1.Profile.Personal",
        "documentation": {}
    },
    {
        "label": "update_personal",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Personal",
        "description": "backend.api.v1.Profile.Personal",
        "peekOfCode": "def update_personal(\n    payload: PersonalUpdateRequest,\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    print(payload.contact_email)\n    result = Profile.update(db=db, user=user, profile=payload)\n    return JSONResponse(\n        status_code=status.HTTP_200_OK,\n        content={",
        "detail": "backend.api.v1.Profile.Personal",
        "documentation": {}
    },
    {
        "label": "delete_personal",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Personal",
        "description": "backend.api.v1.Profile.Personal",
        "peekOfCode": "def delete_personal(\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    success = Profile.delete(db=db, user=user)\n    if not success:\n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={\n                \"success\": False,",
        "detail": "backend.api.v1.Profile.Personal",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.Profile.Personal",
        "description": "backend.api.v1.Profile.Personal",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/personal\")\ndef create_personal(\n    payload: PersonalCreateRequest,  # Đổi schema\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):  \n    print(payload.model_dump())\n    try:\n        result = Profile.create(db=db, user=user, profile=payload)",
        "detail": "backend.api.v1.Profile.Personal",
        "documentation": {}
    },
    {
        "label": "create_personal",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Profile",
        "description": "backend.api.v1.Profile.Profile",
        "peekOfCode": "def create_personal(\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):  \n    try:\n        profile_manager.re_evaluate(db, user.id)\n        return JSONResponse(\n            status_code=status.HTTP_200_OK,\n            content={\n                \"success\": True,",
        "detail": "backend.api.v1.Profile.Profile",
        "documentation": {}
    },
    {
        "label": "get_current_user_profile",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Profile",
        "description": "backend.api.v1.Profile.Profile",
        "peekOfCode": "def get_current_user_profile(\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    \"\"\"Lấy toàn bộ profile của current user\"\"\"\n    try:\n        # Lấy personal info\n        personal = Profile.get(db=db, user=user)\n        # Lấy education\n        education = Education.get(db=db, user=user, params={})",
        "detail": "backend.api.v1.Profile.Profile",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.Profile.Profile",
        "description": "backend.api.v1.Profile.Profile",
        "peekOfCode": "router = APIRouter()\n@router.put(\"/re-evaluate\")\ndef create_personal(\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):  \n    try:\n        profile_manager.re_evaluate(db, user.id)\n        return JSONResponse(\n            status_code=status.HTTP_200_OK,",
        "detail": "backend.api.v1.Profile.Profile",
        "documentation": {}
    },
    {
        "label": "create_publication",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Publication",
        "description": "backend.api.v1.Profile.Publication",
        "peekOfCode": "def create_publication(\n    payload: PublicationCreateRequest,\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    success, result = Publication.create(db=db, user=user, publication=payload)\n    if not success:\n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={",
        "detail": "backend.api.v1.Profile.Publication",
        "documentation": {}
    },
    {
        "label": "get_publication",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Publication",
        "description": "backend.api.v1.Profile.Publication",
        "peekOfCode": "def get_publication(\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    success, result = Publication.get(db=db, user=user, params={})\n    if not success:\n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={\n                \"success\": False,",
        "detail": "backend.api.v1.Profile.Publication",
        "documentation": {}
    },
    {
        "label": "update_publication",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Publication",
        "description": "backend.api.v1.Profile.Publication",
        "peekOfCode": "def update_publication(\n    payload: PublicationUpdateRequest,\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    success, result = Publication.update(db=db, user=user, publication=payload)\n    if not success:\n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={",
        "detail": "backend.api.v1.Profile.Publication",
        "documentation": {}
    },
    {
        "label": "delete_publication",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Publication",
        "description": "backend.api.v1.Profile.Publication",
        "peekOfCode": "def delete_publication(\n    payload: PublicationDeleteRequest,\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    success = Publication.delete(db=db, user=user, publication=payload)\n    if not success:\n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={",
        "detail": "backend.api.v1.Profile.Publication",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.Profile.Publication",
        "description": "backend.api.v1.Profile.Publication",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/publication\")\ndef create_publication(\n    payload: PublicationCreateRequest,\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    success, result = Publication.create(db=db, user=user, publication=payload)\n    if not success:\n        return JSONResponse(",
        "detail": "backend.api.v1.Profile.Publication",
        "documentation": {}
    },
    {
        "label": "create_reference",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Reference",
        "description": "backend.api.v1.Profile.Reference",
        "peekOfCode": "def create_reference(\n    payload: ReferenceCreateRequest,\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    success, result = Reference.create(db=db, user=user, reference=payload)\n    if not success:\n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={",
        "detail": "backend.api.v1.Profile.Reference",
        "documentation": {}
    },
    {
        "label": "get_references",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Reference",
        "description": "backend.api.v1.Profile.Reference",
        "peekOfCode": "def get_references(\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    success, result = Reference.get(db=db, user=user, params={})\n    if not success:\n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={\n                \"success\": False,",
        "detail": "backend.api.v1.Profile.Reference",
        "documentation": {}
    },
    {
        "label": "update_reference",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Reference",
        "description": "backend.api.v1.Profile.Reference",
        "peekOfCode": "def update_reference(\n    payload: ReferenceUpdateRequest,\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    success, result = Reference.update(db=db, user=user, reference=payload)\n    if not success:\n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={",
        "detail": "backend.api.v1.Profile.Reference",
        "documentation": {}
    },
    {
        "label": "delete_reference",
        "kind": 2,
        "importPath": "backend.api.v1.Profile.Reference",
        "description": "backend.api.v1.Profile.Reference",
        "peekOfCode": "def delete_reference(\n    payload: ReferenceDeleteRequest,\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    success = Reference.delete(db=db, user=user, reference=payload)\n    if not success:\n        return JSONResponse(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            content={",
        "detail": "backend.api.v1.Profile.Reference",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.Profile.Reference",
        "description": "backend.api.v1.Profile.Reference",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/reference\")\ndef create_reference(\n    payload: ReferenceCreateRequest,\n    db=Depends(get_db),\n    user=Depends(get_current_user)\n):\n    success, result = Reference.create(db=db, user=user, reference=payload)\n    if not success:\n        return JSONResponse(",
        "detail": "backend.api.v1.Profile.Reference",
        "documentation": {}
    },
    {
        "label": "profile_matching",
        "kind": 2,
        "importPath": "backend.api.v1.ProfileMatching.ProfileMatching",
        "description": "backend.api.v1.ProfileMatching.ProfileMatching",
        "peekOfCode": "def profile_matching(\n    id: str,\n    db = Depends(get_db),\n    user = Depends(get_current_user)\n):\n    scholarship = db.query(Scholarship).filter(Scholarship.id == id).first()\n    profile = Profile.get(db, user)\n    educations = Education.get(db, user)\n    experiences = Experience.get(db, user)\n    achievements = Achievement.get(db, user)",
        "detail": "backend.api.v1.ProfileMatching.ProfileMatching",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.ProfileMatching.ProfileMatching",
        "description": "backend.api.v1.ProfileMatching.ProfileMatching",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/resume-matching\")\nasync def post_scholarship(    \n    resume_file: UploadFile = File(...),\n    scholarship_description: str = Form(...)\n):\n    with NamedTemporaryFile(delete=False, suffix=\".pdf\") as tmp:\n        tmp_path = tmp.name\n        shutil.copyfileobj(resume_file.file, tmp)\n    try:",
        "detail": "backend.api.v1.ProfileMatching.ProfileMatching",
        "documentation": {}
    },
    {
        "label": "smart_search",
        "kind": 2,
        "importPath": "backend.api.v1.SmartSearch.SmartSearch",
        "description": "backend.api.v1.SmartSearch.SmartSearch",
        "peekOfCode": "def smart_search(\n    query: str,\n    db = Depends(get_db)\n):\n    try:\n        scholarships = search(\n            db = db,\n            query = query\n        )\n        return JSONResponse(",
        "detail": "backend.api.v1.SmartSearch.SmartSearch",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.SmartSearch.SmartSearch",
        "description": "backend.api.v1.SmartSearch.SmartSearch",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/smart-search\")\ndef smart_search(\n    query: str,\n    db = Depends(get_db)\n):\n    try:\n        scholarships = search(\n            db = db,\n            query = query",
        "detail": "backend.api.v1.SmartSearch.SmartSearch",
        "documentation": {}
    },
    {
        "label": "ChatRequest",
        "kind": 6,
        "importPath": "backend.api.v1.chat.routes",
        "description": "backend.api.v1.chat.routes",
        "peekOfCode": "class ChatRequest(BaseModel):\n    question: str\n    thread_id: Optional[str] = None  # Optional, will be auto-generated if None or empty\n    user_id: str = \"default_user\"\nclass ChatResponse(BaseModel):\n    answer: str\n    thread_id: str  # Return the used thread_id so client knows which thread was used\nclass ThreadRequest(BaseModel):\n    user_id: str\nclass ThreadResponse(BaseModel):",
        "detail": "backend.api.v1.chat.routes",
        "documentation": {}
    },
    {
        "label": "ChatResponse",
        "kind": 6,
        "importPath": "backend.api.v1.chat.routes",
        "description": "backend.api.v1.chat.routes",
        "peekOfCode": "class ChatResponse(BaseModel):\n    answer: str\n    thread_id: str  # Return the used thread_id so client knows which thread was used\nclass ThreadRequest(BaseModel):\n    user_id: str\nclass ThreadResponse(BaseModel):\n    thread_id: str\nclass ThreadHistoryRequest(BaseModel):\n    user_id: str\n    limit: Optional[int] = 10",
        "detail": "backend.api.v1.chat.routes",
        "documentation": {}
    },
    {
        "label": "ThreadRequest",
        "kind": 6,
        "importPath": "backend.api.v1.chat.routes",
        "description": "backend.api.v1.chat.routes",
        "peekOfCode": "class ThreadRequest(BaseModel):\n    user_id: str\nclass ThreadResponse(BaseModel):\n    thread_id: str\nclass ThreadHistoryRequest(BaseModel):\n    user_id: str\n    limit: Optional[int] = 10\n@router.post(\"/threads/list\")\nasync def list_user_threads(request: ThreadHistoryRequest):\n    \"\"\"",
        "detail": "backend.api.v1.chat.routes",
        "documentation": {}
    },
    {
        "label": "ThreadResponse",
        "kind": 6,
        "importPath": "backend.api.v1.chat.routes",
        "description": "backend.api.v1.chat.routes",
        "peekOfCode": "class ThreadResponse(BaseModel):\n    thread_id: str\nclass ThreadHistoryRequest(BaseModel):\n    user_id: str\n    limit: Optional[int] = 10\n@router.post(\"/threads/list\")\nasync def list_user_threads(request: ThreadHistoryRequest):\n    \"\"\"\n    Get all chat threads for a specific user, ordered by newest first.\n    Each thread includes summary information like message count and the latest message.",
        "detail": "backend.api.v1.chat.routes",
        "documentation": {}
    },
    {
        "label": "ThreadHistoryRequest",
        "kind": 6,
        "importPath": "backend.api.v1.chat.routes",
        "description": "backend.api.v1.chat.routes",
        "peekOfCode": "class ThreadHistoryRequest(BaseModel):\n    user_id: str\n    limit: Optional[int] = 10\n@router.post(\"/threads/list\")\nasync def list_user_threads(request: ThreadHistoryRequest):\n    \"\"\"\n    Get all chat threads for a specific user, ordered by newest first.\n    Each thread includes summary information like message count and the latest message.\n    \"\"\"\n    try:",
        "detail": "backend.api.v1.chat.routes",
        "documentation": {}
    },
    {
        "label": "delete_thread",
        "kind": 2,
        "importPath": "backend.api.v1.chat.routes",
        "description": "backend.api.v1.chat.routes",
        "peekOfCode": "def delete_thread(\n    thread_id: str,\n    user = Depends(get_current_user) \n):\n    success = delete_chat_history(\n        user_id = str(user.id),\n        thread_id = thread_id\n    )\n    if success:\n        return JSONResponse(",
        "detail": "backend.api.v1.chat.routes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "backend.api.v1.chat.routes",
        "description": "backend.api.v1.chat.routes",
        "peekOfCode": "router = APIRouter()\nclass ChatRequest(BaseModel):\n    question: str\n    thread_id: Optional[str] = None  # Optional, will be auto-generated if None or empty\n    user_id: str = \"default_user\"\nclass ChatResponse(BaseModel):\n    answer: str\n    thread_id: str  # Return the used thread_id so client knows which thread was used\nclass ThreadRequest(BaseModel):\n    user_id: str",
        "detail": "backend.api.v1.chat.routes",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "backend.core.config",
        "description": "backend.core.config",
        "peekOfCode": "class Settings(BaseModel):\n    \"\"\"\n    Settings for the application.\n    \"\"\"\n    BASE_DIR: str = os.path.abspath(os.path.join(os.path.dirname(__file__), '../'))\n    SECRET_KEY: str = os.getenv(\"SECRET_KEY\", \"\")\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = 1440\n    REFRESH_TOKEN_EXPIRE_DAYS: int = 7\n    SECURITY_ALGORITHM: str = os.getenv(\"SECURITY_ALGORITHM\", \"\")\n    DATABASE_URL: str = os.getenv(\"DB_URL\",  \"\")",
        "detail": "backend.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "backend.core.config",
        "description": "backend.core.config",
        "peekOfCode": "settings = Settings()",
        "detail": "backend.core.config",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "backend.database.chat_history_service",
        "description": "backend.database.chat_history_service",
        "peekOfCode": "def get_db_connection():\n    \"\"\"\n    Creates and returns a database session from the connection pool.\n    Returns:\n        Session: A SQLAlchemy session that needs to be closed manually\n    \"\"\"\n    return next(get_db())\ndef init_chat_history_table() -> None:\n    \"\"\"\n    Initializes or migrates the message table to include user_id.",
        "detail": "backend.database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "init_chat_history_table",
        "kind": 2,
        "importPath": "backend.database.chat_history_service",
        "description": "backend.database.chat_history_service",
        "peekOfCode": "def init_chat_history_table() -> None:\n    \"\"\"\n    Initializes or migrates the message table to include user_id.\n    - Adds user_id column if it doesn't exist.\n    - Modifies the primary key structure if needed.\n    \"\"\"\n    session = None\n    try:\n        session = get_db_connection()\n        # Check if table exists",
        "detail": "backend.database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "get_next_thread_id",
        "kind": 2,
        "importPath": "backend.database.chat_history_service",
        "description": "backend.database.chat_history_service",
        "peekOfCode": "def get_next_thread_id(user_id: str) -> str:\n    \"\"\"\n    Determines the next sequential thread_id for a given user_id.\n    \"\"\"\n    session = None\n    try:\n        session = get_db_connection()\n        # Find the maximum thread_id for the user, cast to INTEGER for correct sorting\n        # COALESCE is used to handle the case where the user has no threads yet.\n        result = session.execute(",
        "detail": "backend.database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "save_chat_history",
        "kind": 2,
        "importPath": "backend.database.chat_history_service",
        "description": "backend.database.chat_history_service",
        "peekOfCode": "def save_chat_history(user_id: str, thread_id: str, question: str, answer: str, metadata: Optional[Dict] = None) -> Dict:\n    \"\"\"\n    Saves a chat exchange to the database for a given user and thread.\n    The 'id' column is removed. Returns user_id and thread_id.\n    \"\"\"\n    session = None\n    try:\n        session = get_db_connection()\n        # No RETURNING id as id column is removed\n        session.execute(",
        "detail": "backend.database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "get_chat_history",
        "kind": 2,
        "importPath": "backend.database.chat_history_service",
        "description": "backend.database.chat_history_service",
        "peekOfCode": "def get_chat_history(user_id: str, thread_id: str, limit: int = 10, offset: int = 0) -> List[Dict[str, Any]]:\n    \"\"\"\n    Retrieves chat history for a specific user's conversation thread.\n    The 'id' column is removed from the selection.\n    \"\"\"\n    session = None\n    try:\n        session = get_db_connection()\n        result = session.execute(\n            text(\"\"\"",
        "detail": "backend.database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "format_chat_history",
        "kind": 2,
        "importPath": "backend.database.chat_history_service",
        "description": "backend.database.chat_history_service",
        "peekOfCode": "def format_chat_history(chat_history: List[Dict]) -> List[Dict[str, str]]:\n    \"\"\"\n    Formats chat history into a list of message objects with roles.\n    No changes needed here as it operates on the structure from get_chat_history.\n    \"\"\"\n    formatted_history = []\n    for msg in reversed(chat_history): \n        formatted_history.extend([\n            {\"role\": \"human\", \"content\": msg[\"question\"]},\n            {\"role\": \"assistant\", \"content\": msg[\"answer\"]}",
        "detail": "backend.database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "delete_chat_history",
        "kind": 2,
        "importPath": "backend.database.chat_history_service",
        "description": "backend.database.chat_history_service",
        "peekOfCode": "def delete_chat_history(user_id: str, thread_id: str) -> bool:\n    \"\"\"\n    Deletes all chat history for a specific user's thread.\n    \"\"\"\n    session = None\n    try:\n        session = get_db_connection()\n        result = session.execute(\n            text(\"DELETE FROM message WHERE user_id = :user_id AND thread_id = :thread_id\"),\n            {\"user_id\": user_id, \"thread_id\": thread_id}",
        "detail": "backend.database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "get_thread_summary",
        "kind": 2,
        "importPath": "backend.database.chat_history_service",
        "description": "backend.database.chat_history_service",
        "peekOfCode": "def get_thread_summary(user_id: str, thread_id: str) -> Dict[str, Any]:\n    \"\"\"\n    Gets summary information about a specific user's conversation thread.\n    \"\"\"\n    session = None\n    try:\n        session = get_db_connection()\n        count_val = session.execute(\n            text(\"SELECT COUNT(*) FROM message WHERE user_id = :user_id AND thread_id = :thread_id\"), \n            {\"user_id\": user_id, \"thread_id\": thread_id}",
        "detail": "backend.database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "get_user_threads",
        "kind": 2,
        "importPath": "backend.database.chat_history_service",
        "description": "backend.database.chat_history_service",
        "peekOfCode": "def get_user_threads(user_id: str, limit: int = 10) -> List[Dict[str, Any]]:\n    \"\"\"\n    Get all chat threads for a specific user, ordered by thread_id (newest first).\n    Args:\n        user_id (str): The user ID to get threads for\n        limit (int): Maximum number of threads to return (default 10)\n    Returns:\n        List[Dict[str, Any]]: List of thread summaries, each containing:\n            - thread_id\n            - message_count",
        "detail": "backend.database.chat_history_service",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "backend.database.init_db",
        "description": "backend.database.init_db",
        "peekOfCode": "def get_db() -> Generator:\n    try:\n        db = SessionLocal()\n        yield db\n    finally:\n        db.close()",
        "detail": "backend.database.init_db",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "backend.database.init_db",
        "description": "backend.database.init_db",
        "peekOfCode": "engine = create_engine(settings.DATABASE_URL, pool_pre_ping=True)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase.metadata.create_all(bind=engine)\ndef get_db() -> Generator:\n    try:\n        db = SessionLocal()\n        yield db\n    finally:\n        db.close()",
        "detail": "backend.database.init_db",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "backend.database.init_db",
        "description": "backend.database.init_db",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase.metadata.create_all(bind=engine)\ndef get_db() -> Generator:\n    try:\n        db = SessionLocal()\n        yield db\n    finally:\n        db.close()",
        "detail": "backend.database.init_db",
        "documentation": {}
    },
    {
        "label": "get_db_connection",
        "kind": 2,
        "importPath": "backend.database.scholarship_service",
        "description": "backend.database.scholarship_service",
        "peekOfCode": "def get_db_connection():\n    db_generator = get_db()\n    db = next(db_generator)\n    try:\n        yield db\n    finally:\n        try:\n            next(db_generator)\n        except StopIteration:\n            pass",
        "detail": "backend.database.scholarship_service",
        "documentation": {}
    },
    {
        "label": "init_scholarship_table",
        "kind": 2,
        "importPath": "backend.database.scholarship_service",
        "description": "backend.database.scholarship_service",
        "peekOfCode": "def init_scholarship_table():\n    \"\"\"\n    Initialize scholarship table in database if it doesn't exist.\n    This function is kept for compatibility but won't modify existing data.\n    \"\"\"\n    # Since the table already exists with data, we don't need to create it\n    # This function is kept for compatibility with the rest of the code\n    pass\ndef get_table_schema():\n    \"\"\"Get the schema of the scholarships table\"\"\"",
        "detail": "backend.database.scholarship_service",
        "documentation": {}
    },
    {
        "label": "get_table_schema",
        "kind": 2,
        "importPath": "backend.database.scholarship_service",
        "description": "backend.database.scholarship_service",
        "peekOfCode": "def get_table_schema():\n    \"\"\"Get the schema of the scholarships table\"\"\"\n    with get_db_connection() as session:\n        try:\n            # PostgreSQL compatible query\n            sql_query = text(\"SELECT column_name, data_type FROM information_schema.columns WHERE table_schema = 'public' AND table_name = 'scholarships'\")\n            result = session.execute(sql_query)\n            # Each row in the result will be a RowProxy with column_name and data_type\n            columns_with_types = [\n                {\"name\": row.column_name, \"type\": row.data_type} for row in result",
        "detail": "backend.database.scholarship_service",
        "documentation": {}
    },
    {
        "label": "normalize_text",
        "kind": 2,
        "importPath": "backend.database.scholarship_service",
        "description": "backend.database.scholarship_service",
        "peekOfCode": "def normalize_text(text):\n    \"\"\"Normalize text for better search matching\"\"\"\n    if not text:\n        return \"\"\n    # Convert to lowercase, remove extra spaces\n    text = text.lower().strip()\n    # Remove accents\n    text = re.sub(r'[àáảãạăắằẳẵặâấầẩẫậ]', 'a', text)\n    text = re.sub(r'[èéẻẽẹêếềểễệ]', 'e', text)\n    text = re.sub(r'[ìíỉĩị]', 'i', text)",
        "detail": "backend.database.scholarship_service",
        "documentation": {}
    },
    {
        "label": "search_scholarships",
        "kind": 2,
        "importPath": "backend.database.scholarship_service",
        "description": "backend.database.scholarship_service",
        "peekOfCode": "def search_scholarships(query: str) -> List[Dict]:\n    \"\"\"\n    Search scholarships based on query\n    Args:\n        query (str): Search query\n    Returns:\n        List[Dict]: List of matching scholarships\n    \"\"\"\n    normalized_query = normalize_text(query)\n    columns_with_types = get_table_schema()",
        "detail": "backend.database.scholarship_service",
        "documentation": {}
    },
    {
        "label": "get_scholarship_by_id",
        "kind": 2,
        "importPath": "backend.database.scholarship_service",
        "description": "backend.database.scholarship_service",
        "peekOfCode": "def get_scholarship_by_id(scholarship_id: int) -> Optional[Dict]:\n    \"\"\"\n    Get scholarship details by ID\n    Args:\n        scholarship_id (int): Scholarship ID\n    Returns:\n        Optional[Dict]: Scholarship details if found\n    \"\"\"\n    with get_db_connection() as session:\n        try:",
        "detail": "backend.database.scholarship_service",
        "documentation": {}
    },
    {
        "label": "get_scholarship_field",
        "kind": 2,
        "importPath": "backend.database.scholarship_service",
        "description": "backend.database.scholarship_service",
        "peekOfCode": "def get_scholarship_field(scholarship_id: int, field_name: str) -> Optional[Any]:\n    \"\"\"\n    Get a specific field from a scholarship\n    Args:\n        scholarship_id (int): Scholarship ID\n        field_name (str): Field name to retrieve (e.g., 'deadline', 'original_url')\n    Returns:\n        Optional[Any]: The field value if found\n    \"\"\"\n    # It's risky to use f-string to insert field_name directly into SQL",
        "detail": "backend.database.scholarship_service",
        "documentation": {}
    },
    {
        "label": "cal_weights",
        "kind": 2,
        "importPath": "backend.helpers.CriteriaWeights",
        "description": "backend.helpers.CriteriaWeights",
        "peekOfCode": "def cal_weights(weights: Optional[Dict[int, str]] = None):\n    criteria_weights = {\n        \"education_criteria\": 0.0,\n        \"experience_criteria\": 0.0,\n        \"research_criteria\": 0.0,\n        \"achievement_criteria\": 0.0,\n        \"certification_criteria\": 0.0\n    }\n    if weights:\n        # Sắp xếp thứ tự ưu tiên từ 0,1,2,...",
        "detail": "backend.helpers.CriteriaWeights",
        "documentation": {}
    },
    {
        "label": "DataLoader",
        "kind": 6,
        "importPath": "backend.helpers.DataLoader",
        "description": "backend.helpers.DataLoader",
        "peekOfCode": "class DataLoader:\n    def __init__(self):\n        self.text_splitter = RecursiveCharacterTextSplitter(\n            chunk_size=500,\n            chunk_overlap=126,\n            length_function=len,\n            is_separator_regex=False,\n        )\n    def _load(self, db):\n        texts = []",
        "detail": "backend.helpers.DataLoader",
        "documentation": {}
    },
    {
        "label": "data_loader",
        "kind": 5,
        "importPath": "backend.helpers.DataLoader",
        "description": "backend.helpers.DataLoader",
        "peekOfCode": "data_loader = DataLoader()",
        "detail": "backend.helpers.DataLoader",
        "documentation": {}
    },
    {
        "label": "to_dict",
        "kind": 2,
        "importPath": "backend.helpers.DictConvert",
        "description": "backend.helpers.DictConvert",
        "peekOfCode": "def to_dict(model):\n    resp = {}\n    for key, value in vars(model).items():\n        if value is None or key.startswith(\"_\") or key == \"is_public\":\n            continue\n        if isinstance(value, decimal.Decimal):\n            value = float(value)\n        if (not isinstance(value, bool)) and \\\n            (not isinstance(value, int)) and \\\n            (not isinstance(value, float)):",
        "detail": "backend.helpers.DictConvert",
        "documentation": {}
    },
    {
        "label": "convert_scholarship_to_text",
        "kind": 2,
        "importPath": "backend.helpers.DictConvert",
        "description": "backend.helpers.DictConvert",
        "peekOfCode": "def convert_scholarship_to_text(scholarship: PostScholarshipRequest) -> str:\n    if not scholarship:\n        return \"No scholarship information available.\"\n    lines = []\n    # General information\n    title = getattr(scholarship, \"title\", None)\n    lines.append(f\"Scholarship Title: {title or 'N/A'}.\")\n    provider = getattr(scholarship, \"provider\", None)\n    if provider:\n        lines.append(f\"Provided by: {provider}.\")",
        "detail": "backend.helpers.DictConvert",
        "documentation": {}
    },
    {
        "label": "convert_candidate_to_text",
        "kind": 2,
        "importPath": "backend.helpers.DictConvert",
        "description": "backend.helpers.DictConvert",
        "peekOfCode": "def convert_candidate_to_text(profile, educations, experiences, achievements, publications):\n    text = \"\"\n    # === Personal Info ===\n    if profile:\n        full_name = f\"{profile.get('first_name', '')} {profile.get('middle_name', '')} {profile.get('last_name', '')}\".strip()\n        text += f\"Candidate Name: {full_name or 'Unknown'}.\\n\"\n        if profile.get(\"job_title\"):\n            text += f\"Current Job Title: {profile.get('job_title')}.\\n\"\n        if profile.get(\"contact_email\"):\n            text += f\"Email: {profile.get('contact_email')}.\\n\"",
        "detail": "backend.helpers.DictConvert",
        "documentation": {}
    },
    {
        "label": "AuthProviderEnum",
        "kind": 6,
        "importPath": "backend.helpers.Enums",
        "description": "backend.helpers.Enums",
        "peekOfCode": "class AuthProviderEnum(str, enum.Enum):\n    local = 'local'\n    google = 'google'\nclass UserRoleEnum(str, enum.Enum):\n    admin = \"admin\"\n    user = \"user\"\n    moderator = \"moderator\"\nclass ConnectionStatusEnum(str, enum.Enum):\n    pending = 'pending'\n    accepted = 'accepted'",
        "detail": "backend.helpers.Enums",
        "documentation": {}
    },
    {
        "label": "UserRoleEnum",
        "kind": 6,
        "importPath": "backend.helpers.Enums",
        "description": "backend.helpers.Enums",
        "peekOfCode": "class UserRoleEnum(str, enum.Enum):\n    admin = \"admin\"\n    user = \"user\"\n    moderator = \"moderator\"\nclass ConnectionStatusEnum(str, enum.Enum):\n    pending = 'pending'\n    accepted = 'accepted'\n    rejected = 'rejected'\nclass ScholarshipStatusEnum(str, enum.Enum):\n    pending = 'pending'",
        "detail": "backend.helpers.Enums",
        "documentation": {}
    },
    {
        "label": "ConnectionStatusEnum",
        "kind": 6,
        "importPath": "backend.helpers.Enums",
        "description": "backend.helpers.Enums",
        "peekOfCode": "class ConnectionStatusEnum(str, enum.Enum):\n    pending = 'pending'\n    accepted = 'accepted'\n    rejected = 'rejected'\nclass ScholarshipStatusEnum(str, enum.Enum):\n    pending = 'pending'\n    approved = 'approved'\n    rejected = 'rejected'\nclass ApplicationStatusEnum(str, enum.Enum):\n    draft = 'draft'",
        "detail": "backend.helpers.Enums",
        "documentation": {}
    },
    {
        "label": "ScholarshipStatusEnum",
        "kind": 6,
        "importPath": "backend.helpers.Enums",
        "description": "backend.helpers.Enums",
        "peekOfCode": "class ScholarshipStatusEnum(str, enum.Enum):\n    pending = 'pending'\n    approved = 'approved'\n    rejected = 'rejected'\nclass ApplicationStatusEnum(str, enum.Enum):\n    draft = 'draft'\n    submitted = 'submitted'\n    under_review = 'under_review'\n    accepted = 'accepted'\n    rejected = 'rejected'",
        "detail": "backend.helpers.Enums",
        "documentation": {}
    },
    {
        "label": "ApplicationStatusEnum",
        "kind": 6,
        "importPath": "backend.helpers.Enums",
        "description": "backend.helpers.Enums",
        "peekOfCode": "class ApplicationStatusEnum(str, enum.Enum):\n    draft = 'draft'\n    submitted = 'submitted'\n    under_review = 'under_review'\n    accepted = 'accepted'\n    rejected = 'rejected'",
        "detail": "backend.helpers.Enums",
        "documentation": {}
    },
    {
        "label": "Achievement",
        "kind": 6,
        "importPath": "backend.models.Achievement",
        "description": "backend.models.Achievement",
        "peekOfCode": "class Achievement(BareBaseModel):\n    __tablename__ = 'achievements'\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    title = Column(Text)\n    issuer = Column(Text)\n    award_date = Column(Date)\n    description = Column(Text)\n    @staticmethod\n    def create(db, user, achievement: AchievementCreateRequest):\n        new_ach = Achievement(",
        "detail": "backend.models.Achievement",
        "documentation": {}
    },
    {
        "label": "ApplicationDocument",
        "kind": 6,
        "importPath": "backend.models.ApplicationDocument",
        "description": "backend.models.ApplicationDocument",
        "peekOfCode": "class ApplicationDocument(BareBaseModel):\n    __tablename__ = 'application_documents'\n    application_id = Column(UUID(as_uuid=True), ForeignKey(\"scholarship_applications.id\"))\n    document_id = Column(UUID(as_uuid=True), ForeignKey(\"documents.id\"))\n    document_type = Column(Text)\n    uploaded_at = Column(DateTime, default=datetime.utcnow)",
        "detail": "backend.models.ApplicationDocument",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "backend.models.BaseClass",
        "description": "backend.models.BaseClass",
        "peekOfCode": "class Base:\n    __abstract__ = True\n    __name__: str\n    # Generate __tablename__ automatically\n    @declared_attr\n    def __tablename__(cls) -> str:\n        return cls.__name__.lower()\nclass BareBaseModel(Base):\n    __abstract__ = True\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)",
        "detail": "backend.models.BaseClass",
        "documentation": {}
    },
    {
        "label": "BareBaseModel",
        "kind": 6,
        "importPath": "backend.models.BaseClass",
        "description": "backend.models.BaseClass",
        "peekOfCode": "class BareBaseModel(Base):\n    __abstract__ = True\n    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)",
        "detail": "backend.models.BaseClass",
        "documentation": {}
    },
    {
        "label": "Certification",
        "kind": 6,
        "importPath": "backend.models.Certification",
        "description": "backend.models.Certification",
        "peekOfCode": "class Certification(BareBaseModel):\n    __tablename__ = 'certifications'\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    name = Column(Text)\n    type = Column(Text)\n    provider = Column(Text)\n    certification_date = Column(Date)\n    expiry_date = Column(Date)\n    image_path = Column(Text)\n    url = Column(Text)",
        "detail": "backend.models.Certification",
        "documentation": {}
    },
    {
        "label": "CommunityComment",
        "kind": 6,
        "importPath": "backend.models.CommunityComment",
        "description": "backend.models.CommunityComment",
        "peekOfCode": "class CommunityComment(BareBaseModel):\n    __tablename__ = 'community_comments'\n    post_id = Column(UUID(as_uuid=True), ForeignKey(\"community_posts.id\"))\n    author_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    content = Column(Text, nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    # Relationships\n    post = relationship(\"CommunityPost\", back_populates=\"comments\")\n    author = relationship(\"User\")\n    reactions = relationship(\"CommunityCommentReaction\", back_populates=\"comment\", cascade=\"all, delete-orphan\")",
        "detail": "backend.models.CommunityComment",
        "documentation": {}
    },
    {
        "label": "CommunityCommentReaction",
        "kind": 6,
        "importPath": "backend.models.CommunityCommentReaction",
        "description": "backend.models.CommunityCommentReaction",
        "peekOfCode": "class CommunityCommentReaction(BareBaseModel):\n    __tablename__ = 'community_comment_reactions'\n    comment_id = Column(UUID(as_uuid=True), ForeignKey(\"community_comments.id\"))\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    reaction_type = Column(String(20), default=\"like\")\n    created_at = Column(DateTime, default=datetime.utcnow)\n    # Relationships\n    comment = relationship(\"CommunityComment\", back_populates=\"reactions\")\n    user = relationship(\"User\")\n    # Unique constraint: user chỉ reaction 1 lần cho 1 comment",
        "detail": "backend.models.CommunityCommentReaction",
        "documentation": {}
    },
    {
        "label": "CommunityPost",
        "kind": 6,
        "importPath": "backend.models.CommunityPost",
        "description": "backend.models.CommunityPost",
        "peekOfCode": "class CommunityPost(BareBaseModel):\n    __tablename__ = 'community_posts'\n    author_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    content = Column(Text, nullable=False)\n    image = Column(Text, nullable=True)\n    video = Column(Text, nullable=True)\n    files = Column(JSON, default=list)\n    post_type = Column(String(50), default=\"general\")  # experience, announcement, event, question, etc.\n    tags = Column(JSON, default=list)  # [\"Erasmus+\", \"StudyAbroad\", \"ScholarshipTips\"]\n    repost_of = Column(UUID(as_uuid=True), ForeignKey(\"community_posts.id\"), nullable=True)",
        "detail": "backend.models.CommunityPost",
        "documentation": {}
    },
    {
        "label": "CommunityReaction",
        "kind": 6,
        "importPath": "backend.models.CommunityReaction",
        "description": "backend.models.CommunityReaction",
        "peekOfCode": "class CommunityReaction(BareBaseModel):\n    __tablename__ = 'community_reactions'\n    post_id = Column(UUID(as_uuid=True), ForeignKey(\"community_posts.id\"))\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    reaction_type = Column(String(20), default=\"like\")  # like, love, support, etc.\n    created_at = Column(DateTime, default=datetime.utcnow)\n    # Unique constraint - user can only have one reaction per post\n    __table_args__ = (UniqueConstraint('post_id', 'user_id', name='_post_user_reaction'),)\n    # Relationships\n    post = relationship(\"CommunityPost\", back_populates=\"reactions\")",
        "detail": "backend.models.CommunityReaction",
        "documentation": {}
    },
    {
        "label": "Connection",
        "kind": 6,
        "importPath": "backend.models.Connection",
        "description": "backend.models.Connection",
        "peekOfCode": "class Connection(Base):\n    __tablename__ = 'connections'\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"), primary_key=True)\n    connected_user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"), primary_key=True)\n    status = Column(Enum(ConnectionStatusEnum), default=ConnectionStatusEnum.pending)\n    requested_at = Column(DateTime, default=datetime.utcnow)",
        "detail": "backend.models.Connection",
        "documentation": {}
    },
    {
        "label": "Document",
        "kind": 6,
        "importPath": "backend.models.Document",
        "description": "backend.models.Document",
        "peekOfCode": "class Document(BareBaseModel):\n    __tablename__ = 'documents'\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    type = Column(Text)\n    file_path = Column(Text)\n    uploaded_at = Column(DateTime, default=datetime.utcnow)",
        "detail": "backend.models.Document",
        "documentation": {}
    },
    {
        "label": "Education",
        "kind": 6,
        "importPath": "backend.models.Education",
        "description": "backend.models.Education",
        "peekOfCode": "class Education(BareBaseModel):\n    __tablename__ = 'educations'\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    type = Column(Text, default='university')\n    current_study_year = Column(Integer)\n    graduation_year = Column(Integer)\n    institution = Column(Text)\n    major = Column(Text)\n    degree_type = Column(Text)\n    gpa = Column(Numeric(4, 2))",
        "detail": "backend.models.Education",
        "documentation": {}
    },
    {
        "label": "Experience",
        "kind": 6,
        "importPath": "backend.models.Experience",
        "description": "backend.models.Experience",
        "peekOfCode": "class Experience(BareBaseModel):\n    __tablename__ = 'experiences'\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    type = Column(Text, default='work')\n    title = Column(Text)\n    organization = Column(Text)\n    location = Column(Text)\n    start_date = Column(Date)\n    end_date = Column(Date)\n    is_ongoing = Column(Boolean, default=False)",
        "detail": "backend.models.Experience",
        "documentation": {}
    },
    {
        "label": "FeaturedUser",
        "kind": 6,
        "importPath": "backend.models.FeaturedUser",
        "description": "backend.models.FeaturedUser",
        "peekOfCode": "class FeaturedUser(BareBaseModel):\n    __tablename__ = 'featured_users'\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    feature_type = Column(Text)\n    featured_at = Column(DateTime, default=datetime.utcnow)",
        "detail": "backend.models.FeaturedUser",
        "documentation": {}
    },
    {
        "label": "Profile",
        "kind": 6,
        "importPath": "backend.models.Profile",
        "description": "backend.models.Profile",
        "peekOfCode": "class Profile(Base):\n    __tablename__ = 'profiles'\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"), primary_key=True)\n    first_name = Column(Text)\n    middle_name = Column(Text)\n    last_name = Column(Text)\n    gender = Column(Text)\n    job_title = Column(Text, default='student')\n    contact_email = Column(Text)\n    date_of_birth = Column(Date)",
        "detail": "backend.models.Profile",
        "documentation": {}
    },
    {
        "label": "default_criteria",
        "kind": 5,
        "importPath": "backend.models.Profile",
        "description": "backend.models.Profile",
        "peekOfCode": "default_criteria = {\n    \"education\": {\n        \"score\": [0, 0, 0, 0, 0],\n        \"evidence\": []\n    },\n    \"experience\": {\n        \"score\": [0, 0, 0, 0, 0],\n        \"evidence\": []\n    },\n    \"research\": {",
        "detail": "backend.models.Profile",
        "documentation": {}
    },
    {
        "label": "ProfileEvaluation",
        "kind": 6,
        "importPath": "backend.models.ProfileEvaluation",
        "description": "backend.models.ProfileEvaluation",
        "peekOfCode": "class ProfileEvaluation(BareBaseModel):\n    __tablename__ = 'profile_evaluations'\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    scholarship_id = Column(UUID(as_uuid=True), ForeignKey(\"scholarships.id\"))\n    strengths = Column(Text)\n    weaknesses = Column(Text)\n    suggestions = Column(Text)\n    evaluated_at = Column(DateTime, default=datetime.utcnow)",
        "detail": "backend.models.ProfileEvaluation",
        "documentation": {}
    },
    {
        "label": "Publication",
        "kind": 6,
        "importPath": "backend.models.Publication",
        "description": "backend.models.Publication",
        "peekOfCode": "class Publication(BareBaseModel):\n    __tablename__ = 'publications'\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    title = Column(Text)\n    type = Column(Text, default='journal')\n    venue_name = Column(Text)\n    publish_date = Column(Date)\n    url = Column(Text)\n    @staticmethod\n    def create(db, user, publication: PublicationCreateRequest):",
        "detail": "backend.models.Publication",
        "documentation": {}
    },
    {
        "label": "Reference",
        "kind": 6,
        "importPath": "backend.models.Reference",
        "description": "backend.models.Reference",
        "peekOfCode": "class Reference(BareBaseModel):\n    __tablename__ = 'references'\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    name = Column(Text)\n    type = Column(Text, default='academic')\n    job_title = Column(Text)\n    organization = Column(Text)\n    relationship = Column(Text)\n    email = Column(Text)\n    @staticmethod",
        "detail": "backend.models.Reference",
        "documentation": {}
    },
    {
        "label": "SavedPost",
        "kind": 6,
        "importPath": "backend.models.SavedPost",
        "description": "backend.models.SavedPost",
        "peekOfCode": "class SavedPost(BareBaseModel):\n    __tablename__ = 'saved_posts'\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"), nullable=False)\n    post_id = Column(UUID(as_uuid=True), ForeignKey(\"community_posts.id\"), nullable=False) \n    saved_at = Column(DateTime, default=datetime.utcnow)\n    # Relationships\n    user = relationship(\"User\")\n    post = relationship(\"CommunityPost\")\n    # Unique constraint - user chỉ save 1 post 1 lần\n    __table_args__ = (",
        "detail": "backend.models.SavedPost",
        "documentation": {}
    },
    {
        "label": "Scholarship",
        "kind": 6,
        "importPath": "backend.models.Scholarship",
        "description": "backend.models.Scholarship",
        "peekOfCode": "class Scholarship(BareBaseModel):\n    __tablename__ = 'scholarships'\n    title = Column(Text)\n    provider = Column(Text)\n    type = Column(Text)\n    funding_level = Column(Text)\n    region = Column(Text)\n    country = Column(Text)\n    major = Column(Text)\n    degree_level = Column(Text)",
        "detail": "backend.models.Scholarship",
        "documentation": {}
    },
    {
        "label": "ScholarshipApplication",
        "kind": 6,
        "importPath": "backend.models.ScholarshipApplication",
        "description": "backend.models.ScholarshipApplication",
        "peekOfCode": "class ScholarshipApplication(BareBaseModel):\n    __tablename__ = 'scholarship_applications'\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"))\n    scholarship_id = Column(UUID(as_uuid=True), ForeignKey(\"scholarships.id\"))\n    status = Column(Enum(ApplicationStatusEnum), default=ApplicationStatusEnum.draft)\n    submission_date = Column(DateTime)\n    last_updated = Column(DateTime, default=datetime.utcnow)\n    feedback = Column(Text)\n    __table_args__ = (UniqueConstraint('user_id', 'scholarship_id'),)",
        "detail": "backend.models.ScholarshipApplication",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.models.User",
        "description": "backend.models.User",
        "peekOfCode": "class User(BareBaseModel):\n    __tablename__ = 'users'\n    email = Column(Text, unique=True, nullable=False)\n    password_hash = Column(Text, nullable=False)\n    role = Column(Enum(UserRoleEnum), default=UserRoleEnum.user)\n    avatar = Column(Text)\n    banner = Column(Text)\n    created_at = Column(DateTime, default=datetime.utcnow)\n    profile = relationship(\"Profile\", back_populates=\"user\", uselist=False)\n    scholarship = relationship(\"Scholarship\", back_populates=\"user\")",
        "detail": "backend.models.User",
        "documentation": {}
    },
    {
        "label": "UserPoints",
        "kind": 6,
        "importPath": "backend.models.UserPoints",
        "description": "backend.models.UserPoints",
        "peekOfCode": "class UserPoints(Base):\n    __tablename__ = 'user_points'\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"), primary_key=True)\n    total_points = Column(Integer, default=0)\n    last_updated = Column(DateTime, default=datetime.utcnow)",
        "detail": "backend.models.UserPoints",
        "documentation": {}
    },
    {
        "label": "UserScholarshipBookmark",
        "kind": 6,
        "importPath": "backend.models.UserScholarshipBookmark",
        "description": "backend.models.UserScholarshipBookmark",
        "peekOfCode": "class UserScholarshipBookmark(Base):\n    __tablename__ = 'user_scholarship_bookmarks'\n    user_id = Column(UUID(as_uuid=True), ForeignKey(\"users.id\"), primary_key=True)\n    scholarship_id = Column(UUID(as_uuid=True), ForeignKey(\"scholarships.id\"), primary_key=True)\n    saved_at = Column(DateTime, default=datetime.utcnow)",
        "detail": "backend.models.UserScholarshipBookmark",
        "documentation": {}
    },
    {
        "label": "UserBase",
        "kind": 6,
        "importPath": "backend.schemas.Auth.auth",
        "description": "backend.schemas.Auth.auth",
        "peekOfCode": "class UserBase(BaseModel):\n    email: EmailStr\nclass UserCreate(UserBase):\n    email: str\n    password: str\nclass UserLogin(UserBase):\n    password: str\nclass Token(BaseModel):\n    access_token: str\n    refresh_token: str",
        "detail": "backend.schemas.Auth.auth",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "backend.schemas.Auth.auth",
        "description": "backend.schemas.Auth.auth",
        "peekOfCode": "class UserCreate(UserBase):\n    email: str\n    password: str\nclass UserLogin(UserBase):\n    password: str\nclass Token(BaseModel):\n    access_token: str\n    refresh_token: str\n    token_type: str = \"bearer\"\nclass TokenData(BaseModel):",
        "detail": "backend.schemas.Auth.auth",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "backend.schemas.Auth.auth",
        "description": "backend.schemas.Auth.auth",
        "peekOfCode": "class UserLogin(UserBase):\n    password: str\nclass Token(BaseModel):\n    access_token: str\n    refresh_token: str\n    token_type: str = \"bearer\"\nclass TokenData(BaseModel):\n    user_id: Optional[str] = None\nclass UserResponse(UserBase):\n    id: UUID",
        "detail": "backend.schemas.Auth.auth",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "backend.schemas.Auth.auth",
        "description": "backend.schemas.Auth.auth",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    refresh_token: str\n    token_type: str = \"bearer\"\nclass TokenData(BaseModel):\n    user_id: Optional[str] = None\nclass UserResponse(UserBase):\n    id: UUID\n    role: UserRoleEnum\n    avatar: Optional[str] = None",
        "detail": "backend.schemas.Auth.auth",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "backend.schemas.Auth.auth",
        "description": "backend.schemas.Auth.auth",
        "peekOfCode": "class TokenData(BaseModel):\n    user_id: Optional[str] = None\nclass UserResponse(UserBase):\n    id: UUID\n    role: UserRoleEnum\n    avatar: Optional[str] = None\n    banner: Optional[str] = None\n    created_at: datetime\n    class Config:\n        from_attributes = True",
        "detail": "backend.schemas.Auth.auth",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "backend.schemas.Auth.auth",
        "description": "backend.schemas.Auth.auth",
        "peekOfCode": "class UserResponse(UserBase):\n    id: UUID\n    role: UserRoleEnum\n    avatar: Optional[str] = None\n    banner: Optional[str] = None\n    created_at: datetime\n    class Config:\n        from_attributes = True\nclass RefreshToken(BaseModel):\n    refresh_token: str",
        "detail": "backend.schemas.Auth.auth",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "kind": 6,
        "importPath": "backend.schemas.Auth.auth",
        "description": "backend.schemas.Auth.auth",
        "peekOfCode": "class RefreshToken(BaseModel):\n    refresh_token: str",
        "detail": "backend.schemas.Auth.auth",
        "documentation": {}
    },
    {
        "label": "PostScholarshipRequest",
        "kind": 6,
        "importPath": "backend.schemas.CRUD.Scholarship",
        "description": "backend.schemas.CRUD.Scholarship",
        "peekOfCode": "class PostScholarshipRequest(BaseModel):\n    title: str\n    provider: Optional[str] = None\n    type: Optional[str] = None\n    funding_level: Optional[str] = None\n    degree_level: Optional[str] = None\n    region: Optional[str] = None\n    country: Optional[str] = None\n    major: Optional[str] = None\n    # Criteria",
        "detail": "backend.schemas.CRUD.Scholarship",
        "documentation": {}
    },
    {
        "label": "PostCreateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Community.Posts",
        "description": "backend.schemas.Community.Posts",
        "peekOfCode": "class PostCreateRequest(BaseModel):\n    content: str\n    image: Optional[str] = None\n    video: Optional[str] = None\n    files: Optional[List[str]] = []\n    post_type: Optional[str] = \"general\"\n    tags: Optional[List[str]] = []\nclass PostUpdateRequest(BaseModel):\n    content: Optional[str] = None\n    image: Optional[str] = None",
        "detail": "backend.schemas.Community.Posts",
        "documentation": {}
    },
    {
        "label": "PostUpdateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Community.Posts",
        "description": "backend.schemas.Community.Posts",
        "peekOfCode": "class PostUpdateRequest(BaseModel):\n    content: Optional[str] = None\n    image: Optional[str] = None\n    video: Optional[str] = None\n    post_type: Optional[str] = None\n    tags: Optional[List[str]] = None\nclass ReactionRequest(BaseModel):\n    reaction_type: str = \"like\"\nclass CommentCreateRequest(BaseModel):\n    content: str",
        "detail": "backend.schemas.Community.Posts",
        "documentation": {}
    },
    {
        "label": "ReactionRequest",
        "kind": 6,
        "importPath": "backend.schemas.Community.Posts",
        "description": "backend.schemas.Community.Posts",
        "peekOfCode": "class ReactionRequest(BaseModel):\n    reaction_type: str = \"like\"\nclass CommentCreateRequest(BaseModel):\n    content: str\nclass PostResponse(BaseModel):\n    id: str\n    content: str\n    image: Optional[str]\n    video: Optional[str]\n    post_type: str",
        "detail": "backend.schemas.Community.Posts",
        "documentation": {}
    },
    {
        "label": "CommentCreateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Community.Posts",
        "description": "backend.schemas.Community.Posts",
        "peekOfCode": "class CommentCreateRequest(BaseModel):\n    content: str\nclass PostResponse(BaseModel):\n    id: str\n    content: str\n    image: Optional[str]\n    video: Optional[str]\n    post_type: str\n    tags: List[str]\n    created_at: datetime",
        "detail": "backend.schemas.Community.Posts",
        "documentation": {}
    },
    {
        "label": "PostResponse",
        "kind": 6,
        "importPath": "backend.schemas.Community.Posts",
        "description": "backend.schemas.Community.Posts",
        "peekOfCode": "class PostResponse(BaseModel):\n    id: str\n    content: str\n    image: Optional[str]\n    video: Optional[str]\n    post_type: str\n    tags: List[str]\n    created_at: datetime\n    author: dict\n    reactions: dict  # {\"likes\": 87, \"comments\": 32, \"reposts\": 15}",
        "detail": "backend.schemas.Community.Posts",
        "documentation": {}
    },
    {
        "label": "AchievementDeleteRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Achievement",
        "description": "backend.schemas.Profile.Achievement",
        "peekOfCode": "class AchievementDeleteRequest(BaseModel):\n    id: str\nclass AchievementCreateRequest(BaseModel):\n    title: str\n    issuer: str\n    award_date: date\n    description: Optional[str] = None\nclass AchievementUpdateRequest(BaseModel):\n    id: str\n    title: str",
        "detail": "backend.schemas.Profile.Achievement",
        "documentation": {}
    },
    {
        "label": "AchievementCreateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Achievement",
        "description": "backend.schemas.Profile.Achievement",
        "peekOfCode": "class AchievementCreateRequest(BaseModel):\n    title: str\n    issuer: str\n    award_date: date\n    description: Optional[str] = None\nclass AchievementUpdateRequest(BaseModel):\n    id: str\n    title: str\n    issuer: str\n    award_date: date",
        "detail": "backend.schemas.Profile.Achievement",
        "documentation": {}
    },
    {
        "label": "AchievementUpdateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Achievement",
        "description": "backend.schemas.Profile.Achievement",
        "peekOfCode": "class AchievementUpdateRequest(BaseModel):\n    id: str\n    title: str\n    issuer: str\n    award_date: date\n    description: Optional[str] = None",
        "detail": "backend.schemas.Profile.Achievement",
        "documentation": {}
    },
    {
        "label": "CertificationDeleteRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Certification",
        "description": "backend.schemas.Profile.Certification",
        "peekOfCode": "class CertificationDeleteRequest(BaseModel):\n    id: str\nclass CertificationCreateRequest(BaseModel):\n    name: str\n    type: str\n    provider: str\n    certification_date: Optional[date] = None\n    expiry_date: Optional[date] = None\n    image_path: Optional[str] = None\n    url: Optional[str] = None",
        "detail": "backend.schemas.Profile.Certification",
        "documentation": {}
    },
    {
        "label": "CertificationCreateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Certification",
        "description": "backend.schemas.Profile.Certification",
        "peekOfCode": "class CertificationCreateRequest(BaseModel):\n    name: str\n    type: str\n    provider: str\n    certification_date: Optional[date] = None\n    expiry_date: Optional[date] = None\n    image_path: Optional[str] = None\n    url: Optional[str] = None\nclass CertificationUpdateRequest(BaseModel):\n    id: str",
        "detail": "backend.schemas.Profile.Certification",
        "documentation": {}
    },
    {
        "label": "CertificationUpdateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Certification",
        "description": "backend.schemas.Profile.Certification",
        "peekOfCode": "class CertificationUpdateRequest(BaseModel):\n    id: str\n    name: str\n    type: str\n    provider: str\n    certification_date: Optional[date] = None\n    expiry_date: Optional[date] = None\n    image_path: Optional[str] = None\n    url: Optional[str] = None",
        "detail": "backend.schemas.Profile.Certification",
        "documentation": {}
    },
    {
        "label": "EducationDeleteRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Education",
        "description": "backend.schemas.Profile.Education",
        "peekOfCode": "class EducationDeleteRequest(BaseModel):\n    id: str\nclass EducationCreateRequest(BaseModel):\n    type: str = 'university'\n    current_study_year: Optional[int] = None\n    graduation_year: Optional[int] = None\n    institution: Optional[str] = None\n    major: Optional[str] = None\n    degree_type: Optional[str] = None\n    gpa: Optional[float] = None",
        "detail": "backend.schemas.Profile.Education",
        "documentation": {}
    },
    {
        "label": "EducationCreateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Education",
        "description": "backend.schemas.Profile.Education",
        "peekOfCode": "class EducationCreateRequest(BaseModel):\n    type: str = 'university'\n    current_study_year: Optional[int] = None\n    graduation_year: Optional[int] = None\n    institution: Optional[str] = None\n    major: Optional[str] = None\n    degree_type: Optional[str] = None\n    gpa: Optional[float] = None\nclass EducationUpdateRequest(BaseModel):\n    id: str",
        "detail": "backend.schemas.Profile.Education",
        "documentation": {}
    },
    {
        "label": "EducationUpdateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Education",
        "description": "backend.schemas.Profile.Education",
        "peekOfCode": "class EducationUpdateRequest(BaseModel):\n    id: str\n    type: Optional[str] = 'university'\n    current_study_year: Optional[int] = None\n    graduation_year: Optional[int] = None\n    institution: Optional[str] = None\n    major: Optional[str] = None\n    degree_type: Optional[str] = None\n    gpa: Optional[float] = None",
        "detail": "backend.schemas.Profile.Education",
        "documentation": {}
    },
    {
        "label": "ExperienceDeleteRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Experience",
        "description": "backend.schemas.Profile.Experience",
        "peekOfCode": "class ExperienceDeleteRequest(BaseModel):\n    id: str\nclass ExperienceCreateRequest(BaseModel):\n    type: str = Field(default='work')\n    title: str\n    organization: str\n    location: Optional[str] = None\n    start_date: Optional[date] = None\n    end_date: Optional[date] = None\n    is_ongoing: bool = False",
        "detail": "backend.schemas.Profile.Experience",
        "documentation": {}
    },
    {
        "label": "ExperienceCreateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Experience",
        "description": "backend.schemas.Profile.Experience",
        "peekOfCode": "class ExperienceCreateRequest(BaseModel):\n    type: str = Field(default='work')\n    title: str\n    organization: str\n    location: Optional[str] = None\n    start_date: Optional[date] = None\n    end_date: Optional[date] = None\n    is_ongoing: bool = False\n    description: Optional[str] = None\nclass ExperienceUpdateRequest(BaseModel):",
        "detail": "backend.schemas.Profile.Experience",
        "documentation": {}
    },
    {
        "label": "ExperienceUpdateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Experience",
        "description": "backend.schemas.Profile.Experience",
        "peekOfCode": "class ExperienceUpdateRequest(BaseModel):\n    id: str\n    type: str = Field(default='work')\n    title: str\n    organization: str\n    location: Optional[str] = None\n    start_date: date\n    end_date: Optional[date] = None\n    is_ongoing: bool = False\n    description: Optional[str] = None",
        "detail": "backend.schemas.Profile.Experience",
        "documentation": {}
    },
    {
        "label": "PersonalCreateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Personal",
        "description": "backend.schemas.Profile.Personal",
        "peekOfCode": "class PersonalCreateRequest(BaseModel):\n    first_name: Optional[str] = None \n    middle_name: Optional[str] = None\n    last_name: Optional[str] = None\n    gender: Optional[str] = None\n    job_title: Optional[str] = \"student\"\n    contact_email: Optional[str] = None\n    date_of_birth: Optional[str] = str(datetime.today().strftime('%Y-%m-%d'))\n    nationality: Optional[str] = None\n    country_of_residence: Optional[str] = None",
        "detail": "backend.schemas.Profile.Personal",
        "documentation": {}
    },
    {
        "label": "PersonalUpdateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Personal",
        "description": "backend.schemas.Profile.Personal",
        "peekOfCode": "class PersonalUpdateRequest(BaseModel):\n    first_name: Optional[str] = None\n    middle_name: Optional[str] = None\n    last_name: Optional[str] = None\n    gender: Optional[str] = None\n    job_title: Optional[str] = None\n    contact_email: Optional[str] = None\n    date_of_birth: Optional[str] = str(datetime.today().strftime('%Y-%m-%d'))\n    nationality: Optional[str] = None\n    country_of_residence: Optional[str] = None",
        "detail": "backend.schemas.Profile.Personal",
        "documentation": {}
    },
    {
        "label": "PersonalDeleteRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Personal",
        "description": "backend.schemas.Profile.Personal",
        "peekOfCode": "class PersonalDeleteRequest(BaseModel):\n    user_id: str",
        "detail": "backend.schemas.Profile.Personal",
        "documentation": {}
    },
    {
        "label": "PublicationDeleteRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Publication",
        "description": "backend.schemas.Profile.Publication",
        "peekOfCode": "class PublicationDeleteRequest(BaseModel):\n    id: str\nclass PublicationCreateRequest(BaseModel):\n    title: str\n    type: str = Field(default='journal')  # Loại publication, mặc định là 'journal'\n    venue_name: str  # Tên nơi công bố (ví dụ: tạp chí, hội nghị...)\n    publish_date: date  # Ngày công bố\n    url: Optional[str] = None  # URL của publication, nếu có\nclass PublicationUpdateRequest(BaseModel):\n    id: str  # ID của publication cần cập nhật",
        "detail": "backend.schemas.Profile.Publication",
        "documentation": {}
    },
    {
        "label": "PublicationCreateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Publication",
        "description": "backend.schemas.Profile.Publication",
        "peekOfCode": "class PublicationCreateRequest(BaseModel):\n    title: str\n    type: str = Field(default='journal')  # Loại publication, mặc định là 'journal'\n    venue_name: str  # Tên nơi công bố (ví dụ: tạp chí, hội nghị...)\n    publish_date: date  # Ngày công bố\n    url: Optional[str] = None  # URL của publication, nếu có\nclass PublicationUpdateRequest(BaseModel):\n    id: str  # ID của publication cần cập nhật\n    title: Optional[str] = None  # Tiêu đề có thể cập nhật\n    type: Optional[str] = Field(default='journal')  # Loại publication, mặc định là 'journal'",
        "detail": "backend.schemas.Profile.Publication",
        "documentation": {}
    },
    {
        "label": "PublicationUpdateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Publication",
        "description": "backend.schemas.Profile.Publication",
        "peekOfCode": "class PublicationUpdateRequest(BaseModel):\n    id: str  # ID của publication cần cập nhật\n    title: Optional[str] = None  # Tiêu đề có thể cập nhật\n    type: Optional[str] = Field(default='journal')  # Loại publication, mặc định là 'journal'\n    venue_name: Optional[str] = None  # Tên nơi công bố có thể cập nhật\n    publish_date: Optional[date] = None  # Ngày công bố có thể cập nhật\n    url: Optional[str] = None  # URL của publication có thể cập nhật",
        "detail": "backend.schemas.Profile.Publication",
        "documentation": {}
    },
    {
        "label": "ReferenceDeleteRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Reference",
        "description": "backend.schemas.Profile.Reference",
        "peekOfCode": "class ReferenceDeleteRequest(BaseModel):\n    id: str\nclass ReferenceCreateRequest(BaseModel):\n    name: str\n    type: Optional[str] = \"academic\"\n    job_title: str\n    organization: str\n    relationship: str\n    email: EmailStr\nclass ReferenceUpdateRequest(BaseModel):",
        "detail": "backend.schemas.Profile.Reference",
        "documentation": {}
    },
    {
        "label": "ReferenceCreateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Reference",
        "description": "backend.schemas.Profile.Reference",
        "peekOfCode": "class ReferenceCreateRequest(BaseModel):\n    name: str\n    type: Optional[str] = \"academic\"\n    job_title: str\n    organization: str\n    relationship: str\n    email: EmailStr\nclass ReferenceUpdateRequest(BaseModel):\n    id: str\n    name: str",
        "detail": "backend.schemas.Profile.Reference",
        "documentation": {}
    },
    {
        "label": "ReferenceUpdateRequest",
        "kind": 6,
        "importPath": "backend.schemas.Profile.Reference",
        "description": "backend.schemas.Profile.Reference",
        "peekOfCode": "class ReferenceUpdateRequest(BaseModel):\n    id: str\n    name: str\n    type: Optional[str] = \"academic\"\n    job_title: str\n    organization: str\n    relationship: str\n    email: EmailStr",
        "detail": "backend.schemas.Profile.Reference",
        "documentation": {}
    },
    {
        "label": "SmartSearchRequest",
        "kind": 6,
        "importPath": "backend.schemas.SmartSearch.SmartSearch",
        "description": "backend.schemas.SmartSearch.SmartSearch",
        "peekOfCode": "class SmartSearchRequest(BaseModel):\n    query: str",
        "detail": "backend.schemas.SmartSearch.SmartSearch",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "backend.services.Auth.auth",
        "description": "backend.services.Auth.auth",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"api/v1/auth/login\")\nasync def get_user_by_email(db: Session, email: str) -> Optional[User]:\n    \"\"\"Lấy user theo email\"\"\"\n    return db.query(User).filter(User.email == email).first()\nasync def get_current_user(\n    token: str = Depends(oauth2_scheme), \n    db: Session = Depends(get_db)\n) -> User:\n    \"\"\"Lấy thông tin người dùng hiện tại từ token\"\"\"\n    credentials_exception = HTTPException(",
        "detail": "backend.services.Auth.auth",
        "documentation": {}
    },
    {
        "label": "get_current_active_user",
        "kind": 2,
        "importPath": "backend.services.Auth.dependencies",
        "description": "backend.services.Auth.dependencies",
        "peekOfCode": "def get_current_active_user(current_user: User = Depends(get_current_user)) -> User:\n    \"\"\"Kiểm tra người dùng hiện tại có hoạt động không\"\"\"\n    if not current_user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Inactive user\",\n        )\n    return current_user\ndef admin_required(current_user: User = Depends(get_current_user)) -> User:\n    \"\"\"Kiểm tra người dùng hiện tại có phải là admin không\"\"\"",
        "detail": "backend.services.Auth.dependencies",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "kind": 2,
        "importPath": "backend.services.Auth.dependencies",
        "description": "backend.services.Auth.dependencies",
        "peekOfCode": "def admin_required(current_user: User = Depends(get_current_user)) -> User:\n    \"\"\"Kiểm tra người dùng hiện tại có phải là admin không\"\"\"\n    if not current_user.role == UserRoleEnum.admin:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"The user doesn't have enough privileges\",\n        )\n    return current_user\ndef check_user_role(required_roles: List[UserRoleEnum]):\n    \"\"\"Tạo dependency để kiểm tra quyền của người dùng\"\"\"",
        "detail": "backend.services.Auth.dependencies",
        "documentation": {}
    },
    {
        "label": "check_user_role",
        "kind": 2,
        "importPath": "backend.services.Auth.dependencies",
        "description": "backend.services.Auth.dependencies",
        "peekOfCode": "def check_user_role(required_roles: List[UserRoleEnum]):\n    \"\"\"Tạo dependency để kiểm tra quyền của người dùng\"\"\"\n    def _check_user_role(current_user: User = Depends(get_current_user)) -> User:\n        if current_user.role not in required_roles:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=\"The user doesn't have enough privileges\",\n            )\n        return current_user\n    return _check_user_role",
        "detail": "backend.services.Auth.dependencies",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "backend.services.Auth.utils",
        "description": "backend.services.Auth.utils",
        "peekOfCode": "def verify_password(plain_password: str, hashed_password: str) -> bool:\n    \"\"\"Kiểm tra mật khẩu\"\"\"\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password: str) -> str:\n    \"\"\"Mã hóa mật khẩu\"\"\"\n    return pwd_context.hash(password)\ndef create_access_token(subject: Union[str, Any], expires_delta: Optional[timedelta] = None) -> str:\n    \"\"\"Tạo access token JWT\"\"\"\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta",
        "detail": "backend.services.Auth.utils",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "kind": 2,
        "importPath": "backend.services.Auth.utils",
        "description": "backend.services.Auth.utils",
        "peekOfCode": "def get_password_hash(password: str) -> str:\n    \"\"\"Mã hóa mật khẩu\"\"\"\n    return pwd_context.hash(password)\ndef create_access_token(subject: Union[str, Any], expires_delta: Optional[timedelta] = None) -> str:\n    \"\"\"Tạo access token JWT\"\"\"\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode = {\"exp\": expire, \"sub\": str(subject)}",
        "detail": "backend.services.Auth.utils",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "backend.services.Auth.utils",
        "description": "backend.services.Auth.utils",
        "peekOfCode": "def create_access_token(subject: Union[str, Any], expires_delta: Optional[timedelta] = None) -> str:\n    \"\"\"Tạo access token JWT\"\"\"\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode = {\"exp\": expire, \"sub\": str(subject)}\n    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.SECURITY_ALGORITHM)\n    return encoded_jwt\ndef create_refresh_token(subject: Union[str, Any]) -> str:",
        "detail": "backend.services.Auth.utils",
        "documentation": {}
    },
    {
        "label": "create_refresh_token",
        "kind": 2,
        "importPath": "backend.services.Auth.utils",
        "description": "backend.services.Auth.utils",
        "peekOfCode": "def create_refresh_token(subject: Union[str, Any]) -> str:\n    \"\"\"Tạo refresh token JWT\"\"\"\n    expire = datetime.utcnow() + timedelta(days=settings.REFRESH_TOKEN_EXPIRE_DAYS)\n    to_encode = {\"exp\": expire, \"sub\": str(subject)}\n    encoded_jwt = jwt.encode(to_encode, settings.SECRET_KEY, algorithm=settings.SECURITY_ALGORITHM)\n    return encoded_jwt",
        "detail": "backend.services.Auth.utils",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "backend.services.Auth.utils",
        "description": "backend.services.Auth.utils",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    \"\"\"Kiểm tra mật khẩu\"\"\"\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password: str) -> str:\n    \"\"\"Mã hóa mật khẩu\"\"\"\n    return pwd_context.hash(password)\ndef create_access_token(subject: Union[str, Any], expires_delta: Optional[timedelta] = None) -> str:\n    \"\"\"Tạo access token JWT\"\"\"\n    if expires_delta:",
        "detail": "backend.services.Auth.utils",
        "documentation": {}
    },
    {
        "label": "scholarship_to_description",
        "kind": 2,
        "importPath": "backend.services.CRUD.Scholarship",
        "description": "backend.services.CRUD.Scholarship",
        "peekOfCode": "def scholarship_to_description(scholarship: PostScholarshipRequest) -> str:\n    parts = []\n    # Thông tin cơ bản\n    if scholarship.title:\n        parts.append(f\"Học bổng: \\\"{scholarship.title}\\\"\")\n    if scholarship.provider:\n        parts.append(f\"do {scholarship.provider} cung cấp\")\n    if scholarship.type:\n        parts.append(f\"({scholarship.type})\")\n    if scholarship.country or scholarship.region:",
        "detail": "backend.services.CRUD.Scholarship",
        "documentation": {}
    },
    {
        "label": "ProfileManager",
        "kind": 6,
        "importPath": "backend.services.ProfileManager",
        "description": "backend.services.ProfileManager",
        "peekOfCode": "class ProfileManager:\n    def __init__(self, time_limit: int = 3600):\n        self.profile_last_time = {}  # {user_id: last_request_time}\n        self.time_limit = time_limit\n        self.lock = threading.Lock()\n        self.wait_for_update = False\n        self.monitor_thread = threading.Thread(target=self._monitor, daemon=True)\n        self.monitor_thread.start()\n    def _monitor(self):\n        while True:",
        "detail": "backend.services.ProfileManager",
        "documentation": {}
    },
    {
        "label": "profile_manager",
        "kind": 5,
        "importPath": "backend.services.ProfileManager",
        "description": "backend.services.ProfileManager",
        "peekOfCode": "profile_manager = ProfileManager()",
        "detail": "backend.services.ProfileManager",
        "documentation": {}
    },
    {
        "label": "RetrieverManager",
        "kind": 6,
        "importPath": "backend.services.RetrieverManager",
        "description": "backend.services.RetrieverManager",
        "peekOfCode": "class RetrieverManager:\n    def __init__(self, request_limit: int = 100, time_limit: int = 30):\n        self.retriever = retriever\n        self.request_limit = request_limit\n        self.time_limit = time_limit\n        self.wait_for_ingest = False\n        self.request_count = 0\n        self.last_request_time = time.time()\n        self.lock = threading.Lock()\n        self.monitor_thread = threading.Thread(target=self._monitor, daemon=True)",
        "detail": "backend.services.RetrieverManager",
        "documentation": {}
    },
    {
        "label": "retriever_manager",
        "kind": 5,
        "importPath": "backend.services.RetrieverManager",
        "description": "backend.services.RetrieverManager",
        "peekOfCode": "retriever_manager = RetrieverManager()",
        "detail": "backend.services.RetrieverManager",
        "documentation": {}
    },
    {
        "label": "get_application",
        "kind": 2,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "def get_application() -> FastAPI:\n    application = FastAPI()\n    application.add_middleware(\n        CORSMiddleware,\n        allow_origins=[\"*\"],\n        allow_credentials=True,\n        allow_methods=[\"*\"],\n        allow_headers=[\"*\"],\n    )\n    application.add_middleware(DBSessionMiddleware, db_url=settings.DATABASE_URL)",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.main",
        "description": "backend.main",
        "peekOfCode": "app = get_application()\n# if __name__ == '__main__':\n#     uvicorn.run(\"main:app\", host=\"0.0.0.0\", port=8000, reload = True)",
        "detail": "backend.main",
        "documentation": {}
    },
    {
        "label": "login_url",
        "kind": 5,
        "importPath": "backend.test",
        "description": "backend.test",
        "peekOfCode": "login_url = \"https://scholarhub-be.ript.vn/api/v1/auth/login\"\nlogin_payload = {\n    \"username\": \"ript@gmail.com\",\n    \"password\": \"Ript!@#123\"\n}\nheaders = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\nresponse = requests.post(login_url, data=login_payload, headers=headers)\ntoken = response.json()[\"payload\"][\"access_token\"]\npost_url = \"http://localhost:8000/api/v1/post-scholarship\"\npost_headers = {",
        "detail": "backend.test",
        "documentation": {}
    },
    {
        "label": "login_payload",
        "kind": 5,
        "importPath": "backend.test",
        "description": "backend.test",
        "peekOfCode": "login_payload = {\n    \"username\": \"ript@gmail.com\",\n    \"password\": \"Ript!@#123\"\n}\nheaders = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\nresponse = requests.post(login_url, data=login_payload, headers=headers)\ntoken = response.json()[\"payload\"][\"access_token\"]\npost_url = \"http://localhost:8000/api/v1/post-scholarship\"\npost_headers = {\n    \"Authorization\": f\"Bearer {token}\",",
        "detail": "backend.test",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "backend.test",
        "description": "backend.test",
        "peekOfCode": "headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\nresponse = requests.post(login_url, data=login_payload, headers=headers)\ntoken = response.json()[\"payload\"][\"access_token\"]\npost_url = \"http://localhost:8000/api/v1/post-scholarship\"\npost_headers = {\n    \"Authorization\": f\"Bearer {token}\",\n    \"Content-Type\": \"application/json\"\n}\nfor scholarship in tqdm(data, desc = \"Posting Scholarship\"):\n    criteria = {",
        "detail": "backend.test",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "backend.test",
        "description": "backend.test",
        "peekOfCode": "response = requests.post(login_url, data=login_payload, headers=headers)\ntoken = response.json()[\"payload\"][\"access_token\"]\npost_url = \"http://localhost:8000/api/v1/post-scholarship\"\npost_headers = {\n    \"Authorization\": f\"Bearer {token}\",\n    \"Content-Type\": \"application/json\"\n}\nfor scholarship in tqdm(data, desc = \"Posting Scholarship\"):\n    criteria = {\n        0: \"education_criteria\",",
        "detail": "backend.test",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 5,
        "importPath": "backend.test",
        "description": "backend.test",
        "peekOfCode": "token = response.json()[\"payload\"][\"access_token\"]\npost_url = \"http://localhost:8000/api/v1/post-scholarship\"\npost_headers = {\n    \"Authorization\": f\"Bearer {token}\",\n    \"Content-Type\": \"application/json\"\n}\nfor scholarship in tqdm(data, desc = \"Posting Scholarship\"):\n    criteria = {\n        0: \"education_criteria\",\n        1: \"experience_criteria\",",
        "detail": "backend.test",
        "documentation": {}
    },
    {
        "label": "post_url",
        "kind": 5,
        "importPath": "backend.test",
        "description": "backend.test",
        "peekOfCode": "post_url = \"http://localhost:8000/api/v1/post-scholarship\"\npost_headers = {\n    \"Authorization\": f\"Bearer {token}\",\n    \"Content-Type\": \"application/json\"\n}\nfor scholarship in tqdm(data, desc = \"Posting Scholarship\"):\n    criteria = {\n        0: \"education_criteria\",\n        1: \"experience_criteria\",\n        2: \"research_criteria\",",
        "detail": "backend.test",
        "documentation": {}
    },
    {
        "label": "post_headers",
        "kind": 5,
        "importPath": "backend.test",
        "description": "backend.test",
        "peekOfCode": "post_headers = {\n    \"Authorization\": f\"Bearer {token}\",\n    \"Content-Type\": \"application/json\"\n}\nfor scholarship in tqdm(data, desc = \"Posting Scholarship\"):\n    criteria = {\n        0: \"education_criteria\",\n        1: \"experience_criteria\",\n        2: \"research_criteria\",\n        3: \"certification_criteria\",",
        "detail": "backend.test",
        "documentation": {}
    },
    {
        "label": "login_url",
        "kind": 5,
        "importPath": "backend.test2",
        "description": "backend.test2",
        "peekOfCode": "login_url = \"http://localhost:8000/api/v1/auth/login\"\nlogin_payload = {\n    \"username\": \"ntgiang141105@gmail.com\",\n    \"password\": \"14112005aZ*\"\n}\nheaders = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\nresponse = requests.post(login_url, data=login_payload, headers=headers)\ntoken = response.json()[\"payload\"][\"access_token\"]\nscholarship_url = \"http://localhost:8000/api/v1/scholarships\"\nheaders = {",
        "detail": "backend.test2",
        "documentation": {}
    },
    {
        "label": "login_payload",
        "kind": 5,
        "importPath": "backend.test2",
        "description": "backend.test2",
        "peekOfCode": "login_payload = {\n    \"username\": \"ntgiang141105@gmail.com\",\n    \"password\": \"14112005aZ*\"\n}\nheaders = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\nresponse = requests.post(login_url, data=login_payload, headers=headers)\ntoken = response.json()[\"payload\"][\"access_token\"]\nscholarship_url = \"http://localhost:8000/api/v1/scholarships\"\nheaders = {\n    \"Authorization\": f\"Bearer {token}\"",
        "detail": "backend.test2",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "backend.test2",
        "description": "backend.test2",
        "peekOfCode": "headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\nresponse = requests.post(login_url, data=login_payload, headers=headers)\ntoken = response.json()[\"payload\"][\"access_token\"]\nscholarship_url = \"http://localhost:8000/api/v1/scholarships\"\nheaders = {\n    \"Authorization\": f\"Bearer {token}\"\n}\nparams = {\n    \"suggest\": \"true\"\n}",
        "detail": "backend.test2",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "backend.test2",
        "description": "backend.test2",
        "peekOfCode": "response = requests.post(login_url, data=login_payload, headers=headers)\ntoken = response.json()[\"payload\"][\"access_token\"]\nscholarship_url = \"http://localhost:8000/api/v1/scholarships\"\nheaders = {\n    \"Authorization\": f\"Bearer {token}\"\n}\nparams = {\n    \"suggest\": \"true\"\n}\nresponse = requests.get(scholarship_url, headers=headers, params=params)",
        "detail": "backend.test2",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 5,
        "importPath": "backend.test2",
        "description": "backend.test2",
        "peekOfCode": "token = response.json()[\"payload\"][\"access_token\"]\nscholarship_url = \"http://localhost:8000/api/v1/scholarships\"\nheaders = {\n    \"Authorization\": f\"Bearer {token}\"\n}\nparams = {\n    \"suggest\": \"true\"\n}\nresponse = requests.get(scholarship_url, headers=headers, params=params)\nprint(response)",
        "detail": "backend.test2",
        "documentation": {}
    },
    {
        "label": "scholarship_url",
        "kind": 5,
        "importPath": "backend.test2",
        "description": "backend.test2",
        "peekOfCode": "scholarship_url = \"http://localhost:8000/api/v1/scholarships\"\nheaders = {\n    \"Authorization\": f\"Bearer {token}\"\n}\nparams = {\n    \"suggest\": \"true\"\n}\nresponse = requests.get(scholarship_url, headers=headers, params=params)\nprint(response)",
        "detail": "backend.test2",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "backend.test2",
        "description": "backend.test2",
        "peekOfCode": "headers = {\n    \"Authorization\": f\"Bearer {token}\"\n}\nparams = {\n    \"suggest\": \"true\"\n}\nresponse = requests.get(scholarship_url, headers=headers, params=params)\nprint(response)",
        "detail": "backend.test2",
        "documentation": {}
    },
    {
        "label": "params",
        "kind": 5,
        "importPath": "backend.test2",
        "description": "backend.test2",
        "peekOfCode": "params = {\n    \"suggest\": \"true\"\n}\nresponse = requests.get(scholarship_url, headers=headers, params=params)\nprint(response)",
        "detail": "backend.test2",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "backend.test2",
        "description": "backend.test2",
        "peekOfCode": "response = requests.get(scholarship_url, headers=headers, params=params)\nprint(response)",
        "detail": "backend.test2",
        "documentation": {}
    },
    {
        "label": "login_url",
        "kind": 5,
        "importPath": "backend.test3",
        "description": "backend.test3",
        "peekOfCode": "login_url = \"http://localhost:8000/api/v1/auth/login\"\nlogin_payload = {\n    \"username\": \"ript@gmail.com\",\n    \"password\": \"Ript!@#123\"\n}\nheaders = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\nresponse = requests.post(login_url, data=login_payload, headers=headers)\ntoken = response.json()[\"payload\"][\"access_token\"]\npost_url = \"http://localhost:8000/api/v1/post-scholarship\"\npost_headers = {",
        "detail": "backend.test3",
        "documentation": {}
    },
    {
        "label": "login_payload",
        "kind": 5,
        "importPath": "backend.test3",
        "description": "backend.test3",
        "peekOfCode": "login_payload = {\n    \"username\": \"ript@gmail.com\",\n    \"password\": \"Ript!@#123\"\n}\nheaders = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\nresponse = requests.post(login_url, data=login_payload, headers=headers)\ntoken = response.json()[\"payload\"][\"access_token\"]\npost_url = \"http://localhost:8000/api/v1/post-scholarship\"\npost_headers = {\n    \"Authorization\": f\"Bearer {token}\",",
        "detail": "backend.test3",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "backend.test3",
        "description": "backend.test3",
        "peekOfCode": "headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\nresponse = requests.post(login_url, data=login_payload, headers=headers)\ntoken = response.json()[\"payload\"][\"access_token\"]\npost_url = \"http://localhost:8000/api/v1/post-scholarship\"\npost_headers = {\n    \"Authorization\": f\"Bearer {token}\",\n    \"Content-Type\": \"application/json\"\n}\ncriterias = [\"achievement\", \"education\", \"experience\", \"research\", \"certification\"]\nfor scholarship in tqdm(data, desc = \"Posting Scholarship\"):",
        "detail": "backend.test3",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "backend.test3",
        "description": "backend.test3",
        "peekOfCode": "response = requests.post(login_url, data=login_payload, headers=headers)\ntoken = response.json()[\"payload\"][\"access_token\"]\npost_url = \"http://localhost:8000/api/v1/post-scholarship\"\npost_headers = {\n    \"Authorization\": f\"Bearer {token}\",\n    \"Content-Type\": \"application/json\"\n}\ncriterias = [\"achievement\", \"education\", \"experience\", \"research\", \"certification\"]\nfor scholarship in tqdm(data, desc = \"Posting Scholarship\"):\n    del scholarship[\"personal_criteria\"]",
        "detail": "backend.test3",
        "documentation": {}
    },
    {
        "label": "token",
        "kind": 5,
        "importPath": "backend.test3",
        "description": "backend.test3",
        "peekOfCode": "token = response.json()[\"payload\"][\"access_token\"]\npost_url = \"http://localhost:8000/api/v1/post-scholarship\"\npost_headers = {\n    \"Authorization\": f\"Bearer {token}\",\n    \"Content-Type\": \"application/json\"\n}\ncriterias = [\"achievement\", \"education\", \"experience\", \"research\", \"certification\"]\nfor scholarship in tqdm(data, desc = \"Posting Scholarship\"):\n    del scholarship[\"personal_criteria\"]\n    for criteria in criterias:",
        "detail": "backend.test3",
        "documentation": {}
    },
    {
        "label": "post_url",
        "kind": 5,
        "importPath": "backend.test3",
        "description": "backend.test3",
        "peekOfCode": "post_url = \"http://localhost:8000/api/v1/post-scholarship\"\npost_headers = {\n    \"Authorization\": f\"Bearer {token}\",\n    \"Content-Type\": \"application/json\"\n}\ncriterias = [\"achievement\", \"education\", \"experience\", \"research\", \"certification\"]\nfor scholarship in tqdm(data, desc = \"Posting Scholarship\"):\n    del scholarship[\"personal_criteria\"]\n    for criteria in criterias:\n        scholarship[f\"{criteria}_criteria\"] = str(scholarship[f\"{criteria}_criteria\"])",
        "detail": "backend.test3",
        "documentation": {}
    },
    {
        "label": "post_headers",
        "kind": 5,
        "importPath": "backend.test3",
        "description": "backend.test3",
        "peekOfCode": "post_headers = {\n    \"Authorization\": f\"Bearer {token}\",\n    \"Content-Type\": \"application/json\"\n}\ncriterias = [\"achievement\", \"education\", \"experience\", \"research\", \"certification\"]\nfor scholarship in tqdm(data, desc = \"Posting Scholarship\"):\n    del scholarship[\"personal_criteria\"]\n    for criteria in criterias:\n        scholarship[f\"{criteria}_criteria\"] = str(scholarship[f\"{criteria}_criteria\"])\n    criteria = {",
        "detail": "backend.test3",
        "documentation": {}
    },
    {
        "label": "criterias",
        "kind": 5,
        "importPath": "backend.test3",
        "description": "backend.test3",
        "peekOfCode": "criterias = [\"achievement\", \"education\", \"experience\", \"research\", \"certification\"]\nfor scholarship in tqdm(data, desc = \"Posting Scholarship\"):\n    del scholarship[\"personal_criteria\"]\n    for criteria in criterias:\n        scholarship[f\"{criteria}_criteria\"] = str(scholarship[f\"{criteria}_criteria\"])\n    criteria = {\n        0: \"education_criteria\",\n        1: \"experience_criteria\",\n        2: \"research_criteria\",\n        3: \"certification_criteria\",",
        "detail": "backend.test3",
        "documentation": {}
    }
]